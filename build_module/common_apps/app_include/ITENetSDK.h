/**
 * @file ITENetSDK.h
 * @brief  ????SDK?á¹¹??Í·?Ä¼?
 * @author <itarge@itarge.com>
 * @version 1.0.0
 * @date 2017-06-02
 */

/* Copyright (C) 2009-2016, Itarge Inc.
 * All right reserved
 *
 */

#ifndef __ITE_NET_SDK_H__
#define __ITE_NET_SDK_H__
#include <netinet/in.h>
#include "ite_typedef.h"

#ifndef WIN32
typedef struct in_addr IN_ADDR;
#endif

#ifdef WIN32
typedef SYSTEMTIME IPNC_TIME;                                // win32 ??ÏµÍ³Ê±??Ê±?? SYSTEMTIME
#else
// linux
typedef struct timeval IPNC_TIME;                            // linuxÆ½Ì¨ÏµÍ³Ê±?? timeval
#endif

/************************************************************************
 ** ??Á¿????
 ***********************************************************************/
// SDK?æ±¾?Å¶???
#ifndef MAKE_VER
typedef OS_U16 _VER_T;
#define MAKE_VER(a, b)  ((_VER_T)(((OS_U8)(((_VER_T)(a)) & 0xff)) | ((_VER_T)((OS_U8)(((_VER_T)(b)) & 0xff))) << 8))
#endif

typedef enum
{
    eSDKVer11 = MAKE_VER(1, 1)                               // 1.01?æ±¾
                // NICP?æ±¾??eNICPVer11 1.01
} ESDKVer;

// ???????Í´??Å£???Ó¦ITE_IPNC_GetLastError?Ó¿ÚµÄ·???Öµ
#define _EC(x)                      (0x80000000|x)
#define SDK_NOERROR                 0                        // Ã»?Ð´???
#define SDK_NOTINITIALISED          -1                       // Ã»?Ð³?Ê¼??SDK????Òª?É¹?????ITE_Init

#define SDK_SYSTEM_ERROR            _EC(0x1)                 // ÏµÍ³???Ã´???
#define SDK_HANDLE_ERROR            _EC(0x2)                 // ??????HANDLE??????
#define SDK_CONNECT_ERROR           _EC(0x3)                 // Á¬???????????Æ¶Ë¿?Ê§??
#define SDK_CMD_FAIL                _EC(0x4)                 // ????Ö´??Ê§??
#define SDK_HEAD_FAIL               _EC(0x5)                 // ??????Ï¢??????Ê§??
#define SDK_PARAM_ERROR             _EC(0x6)                 // ????????
#define SDK_SEARCH_ERROR            _EC(0x7)                 // ????Ö¸??IP??????Ê§??

#define SDK_NETWORK_ERROR           _EC(0x100)               // ????????
#define SDK_NETWORK_TIMEOUT         _EC(0x101)               // ???ç³¬Ê±
#define SDK_MUTEX_TIMEOUT           _EC(0x110)               // ?Ù½?????Ê±

#define SDK_NOTSUPPORT              _EC(0x200)               // ???Ã½Ó¿Ú²???Ö§??
#define SDK_IPNC_APPVER             _EC(0x201)               // Ç¶??Ê½?????æ±¾?Í£???????Ç¶??Ê½????
#define SDK_IPNC_TYPE_ERROR         _EC(0x202)               // ?????????ÍºÅ´???
#define SDK_SUPPORT_ERROR           _EC(0x203)               // ?????????ÍºÅ²?Ö§?Ö¸Ã½Ó¿Ú£????Ü£?
#define SDK_IPNC_SDKVER             _EC(0x204)               // SDK?æ±¾???Í£???????SDK?æ±¾

#define SDK_SAVE_CONFIGING          _EC(0x300)               // ?????????Ú±?????????SDK?ó²¿·Ö½Ó¿Ú¶??á·µ?Ø¸Ã´?????
// ?Ã»????âµ½?Ã´????????????Ó³??????????Ô²???
#define SDK_SAVE_CONFIG_ERROR       _EC(0x301)               // ??????????????Ê§??

#define SDK_SOFT_SNAP_SEND_ERROR    _EC(0x400)               // ?????í´¥??Ö¸??Ê§??
#define SDK_SOFT_SNAP_RECV_TIMEOUT  _EC(0x401)               // ?????í´¥??Ö¸??Ö´?Ð½?????Ê±
#define SDK_SOFT_SNAP_ERROR         _EC(0x402)               // ?í´¥??Ö¸??Ö´??Ê§??
#define SDK_SOFT_SNAP_CALLBACK      _EC(0x403)               // ?í´¥?????Õ»Øµ?????Ã»??????

#define SDK_NTP_ERROR               _EC(0x500)               // ??????NTPÐ£Ê±Ê§??
#define SDK_NTP_TIMEOUT             _EC(0x501)               // ?È´???????NTPÐ£Ê±??????Ê±

#define SDK_STREAM_MAX              _EC(0x800)               // ??????????Æµ??????????

#define SDK_MEMORY_LACK             _EC(0x1000)              // ?Ú´?????Ê§??

#define DEVICE_NAME_LENGTH          (32)
#define DEVICE_APPVER_LENGTH        (32)
#define DEVICE_RESERVED_LENGTH      (32)
#define DEVICE_TITLE_LENGTH         (12)
#define DEVICE_NUMBER_LENGTH        (16)
#define DEVICE_DIRECTIONLENGTH      (8)
#define DEVICE_POSITION_LENGTH      (64)
#define DEVICE_SN_LENGTH            (32)
#define DEVICE_TYPE_LENGTH          (64)

#define DEV_INFO_ITEM_LENGTH        (64)
#define DEV_USER_DEFINED_LENGTH     (64)
#define DEV_IP_ADDR_LENGTH          (31)

#define USER_LEN                    (32)                     // ?Ã»???????
#define PASSWORD_LEN                (32)                     // ???ë³¤??
#define MAX_FILE_NAME               (128)                    // /< Maximum length of file name.
#define MAX_DOMAIN_LEN              (64)                     // ???????ó³¤¶?




/************************abtain the scence parameter*****************************/
typedef struct IPNC_ITSPrivateParam
{
    OS_S32 nSharpness;                                       // ????
    OS_S32 nBrightness;                                      // ?Á¶?
    OS_S32 nContrast;                                        // ?Ô±È¶?
    OS_S32 nGamma;                                           // Ù¤??Öµ
    OS_S32 nBlackLevel;                                      // ?Úµ?Æ½
    OS_S32 nMinAgc;                                          // ????????
    OS_S32 nSaturation;                                      // ???Í¶?
    OS_S32 nEcompensation;                                   // ?Ø¹â²¹??
    OS_S32 nEdgeEnhance;                                     // cancel for kepler                                           // ??Ôµ??Ç¿
    OS_S32 nEdgeSensitive;                                   // cancel for kepler                                           // ??Ôµ???Ð¶?
    OS_S32 nNoiseFilter;                                     // noise filter for kepler
    OS_S32 nReserved[4];                                     // ????
} IPNC_ITSPrivateParam, *PIPNC_ITSPrivateParam;

typedef struct IPNC_ITSPublicParam
{
    OS_S32 nMaxExpotime;                                     // ????????
    OS_S32 nMinExpotime;                                     // ????????
    OS_S32 nMaxAgc;                                          // ????????
    OS_S32 nPicSnapQuality;                                  // Í¼??×¥????Á¿
    OS_S32 nPicSteramQuality;                                // Í¼??????Á¿
    OS_S32 nEcompensation;                                   // ?Ø¹â²¹??
    OS_S32 nRed;                                             // ??É«????
    OS_S32 nGreen;                                           // ??É«????
    OS_S32 nBlue;                                            // À¶É«????
    OS_S32 nZoneExp;                                         // ?????Ø¹?Í³??(4*4)
    OS_S32 nLampThershold;                                   // ?????Á¶???Öµ(-10~~10), Ä¬??Îª0
    OS_S32 nMWBThershold;                                    // ?Ö¶???Æ½????Öµ(-10~~10)
    OS_S32 nImageRotation;                                   // Í¼????×ª
    OS_U16 nNightAWBSwitch;                                  // Ò¹????Æ½?â¿ª?? 0?Ø±? 1????
    OS_U16 nNightAWBThershiold;                              // Ò¹????Æ½????Öµ 0-255
    OS_U16 nRedSecond;                                       // ??É«????(???×»??Ú¶???SENSOR)
    OS_U16 nGreenSecond;                                     // ??É«????(???×»??Ú¶???SENSOR)
    OS_U16 nBlueSecond;                                      // À¶É«????(???×»??Ú¶???SENSOR)
    OS_U16 nNightAWBSwitchSecond;                            // Ò¹????Æ½?â¿ª??0?Ø±?1????(???×»??Ú¶???SENSOR)
    OS_U16 nNightAWBThershioldSecond;                        // Ò¹????Æ½????Öµ0-255 (???×»??Ú¶???SENSOR)
    OS_S16 flashwhite;                                       // ?Á¹??Æ°?Æ½?â²¹??
    OS_F32     TomapFreq;                                    // Æµ??
    OS_F32     TomapLevel;                                   // Ç¿?ÈµÈ¼?
    OS_F32     TomapDetail;                                  // Ï¸??
    OS_S32     nReserved[3];
} IPNC_ITSPublicParam, *PIPNC_ITSPublicParam;


typedef struct iCAMERA_ISP_Param
{
    OS_S32 sensorchl;                                        // sensor????
    OS_S32 nMaxExpotime;                                     // ????????
    OS_S32 nMinExpotime;                                     // ????????
    OS_S32 nMaxGain;                                         // ????????
    OS_S32 nMinGain;                                         // ????????

    OS_S32 nZoneExp;                                         // ?????Ø¹?Í³??(4*4)
    OS_S32 nEcompensation;                                   // ?Ø¹â²¹??
    OS_S32 nSceneMode;                                       // ????
    OS_S32 nAESpeed;                                         // AE ?????Ù¶?

    OS_S32 nDaySharpness;                                    // ????
    OS_S32 nDayBrightness;                                   // ?Á¶?
    OS_S32 nDayContrast;                                     // ?Ô±È¶?
    OS_S32 nDayGamma;                                        // Ù¤??Öµ
    OS_S32 nDayBlackLevel;                                   // ?Úµ?Æ½
    OS_S32 nDaySaturation;                                   // ???Í¶?

    OS_S32 nDayAwbSwitch;                                    // ?????Ô¶???Æ½?? 0r ?Ö¶???Æ½??
    OS_S32 nDayRed;                                          // ??É«????
    OS_S32 nDayGreen;                                        // ??É«????
    OS_S32 nDayBlue;                                         // À¶É«????
    OS_S32 nDayDenoise;			                //°×Ìì½µÔë
    OS_S32 nDayJquality;                                    //JPEG °×Ìì±àÂëÖÊÁ¿
    OS_S16 nDayDehaze;                                  // °×ÌìÍ¸Îí
    OS_S16 nDayWDR;                                     // °×Ìì¿í¶¯Ì¬µÈ¼¶
    OS_S32 nDayResv[29];                                  //°×Ìì±£Áô²ÎÊý


    OS_S32 nNightSharpness;                                  // ????
    OS_S32 nNightBrightness;                                 // ?Á¶?
    OS_S32 nNightContrast;                                   // ?Ô±È¶?
    OS_S32 nNightGamma;                                      // Ù¤??Öµ
    OS_S32 nNightBlackLevel;                                 // ?Úµ?Æ½
    OS_S32 nNightSaturation;                                 // ???Í¶?

    OS_S32 nNightAwbSwitch;                                  // Ò¹???Ô¶???Æ½?? or ?Ö¶???Æ½??
    OS_S32 nNightAwbThershiold;                              // Ò¹????Æ½????Öµ 0-255
    OS_S32 nNightRed;                                        // ??É«????
    OS_S32 nNightGreen;                                      // ??É«????
    OS_S32 nNightBlue;                                       // À¶É«????

    OS_S32 nNightSpecialAwbSwitch;                           // Ò¹?????â³¡????Æ½??
    OS_S32 nNightSpecialAwbCondition;                        // Ò¹?????â³¡????Æ½?????? ????????Ô´ ?Á¹???
    OS_S32 nNightSpecialRed;                                 // ??É«????
    OS_S32 nNightSpecialGreen;                               // ??É«????
    OS_S32 nNightSpecialBlue;                                // À¶É«????
    OS_S32 nNightDenoise;                                     // Ò¹¼ä½µÔë²ÎÊý
    OS_S32 nNightJquality;                                    //JPEG °×Ìì±àÂëÖÊÁ¿
    OS_S16 nNightDehaze;                                  // Ò¹¼äÍ¸Îí
    OS_S16 nNightWDR;                                       // Ò¹¼ä¿í¶¯Ì¬µÈ¼¶
    OS_S32 nNightResv[29];                                   // Ò¹¼ä±£Áô²ÎÊý

    OS_S32 nLampThershold;                                   // ¿ªµÆÁÁ¶ÈãÐÖµ(-10~~10), Ä¬ÈÏÎª0
    OS_U8  ucresv;                                                
    OS_U8  enFocus;                                                   // 0 ;1;
    OS_U16  enRotation;                                            // 0,90,180,270;
    OS_BOOL lfr;                                                // 1:ÆôÓÃµÍÖ¡ÂÊÄ£Ê½, 0:Õý³£Ä£Ê½
    OS_S32 nReserved[62];                                        // isp±£Áô²ÎÊý
} iCAMERA_ISP_Param ;


typedef struct EXT_ISP_Param
{
    OS_S32 sensorIndex;                                        // max 4
    iCAMERA_ISP_Param stISPparam[4];                         // ????Ö§??4Â·sensor ????
    OS_S32 szReserverd[32];                                  // ????
} EXT_ISP_Param;



/************************???Æ²???******************************/

typedef struct IPNC_SmartRecogParam
{
    OS_S32 nMinWindth;                                       // ??????Ð¡????
    OS_S32 nMaxWindth;                                       // ????????????
    OS_U8 cProvince[4];                                      // Ê¡?????È¼?
    OS_S32 nDefinition;                                      // ??????Ö¸??
    OS_S32 nMatchThreshold;                                  // ??Î»??Öµ
    OS_S32 nRecogThreshold;                                  // Ê¶????Öµ

    OS_U8 bDoubleYellow;                                     // Ë«??????
    OS_U8 bIndividuation;                                    // ???Ô»?????
    OS_U8 bArmy;                                             // ???Ã³???
    OS_U8 bDoubleArmy;                                       // Ë«?????Ã³???
    OS_U8 bFarming;                                          // Å©?Ã³???
    OS_U8 bIsNight;                                          // Ò¹??Ä£Ê½
} IPNC_SmartRecogParam;

/****************************************************/

/* ???Ã²??????Ø¶??? */
// ?è±¸??Ï¢
typedef struct IPNC_DeviceInfo
{
    // ???????é¶¼??????Ð§?Ö·û£¬²»??À¨??????
    OS_U8 szDeviceTitle[DEVICE_TITLE_LENGTH];                // 12 ????
    OS_U8 szDeviceNumber[DEVICE_NUMBER_LENGTH];              // 16 ????
    OS_U8 szDeviceDirection[DEVICE_DIRECTIONLENGTH];         // 8 ????????
    OS_U8 szDevicePosition[DEVICE_POSITION_LENGTH];          // 64 Î»??
} IPNC_DeviceInfo, *PIPNC_DeviceInfo;

// À©Õ¹?è±¸??????Ï¢
typedef struct IPNC_DeviceInfoExt
{
    // ???????é¶¼??????Ð§?Ö·û£¬²»??À¨??????
    OS_S8 szDevTitle[DEV_INFO_ITEM_LENGTH];                  // 64bytes  ?è±¸????
    OS_S8 szDevNumber[DEV_INFO_ITEM_LENGTH];                 // 64bytes  ?è±¸????
    OS_S8 szDevDirection[DEV_INFO_ITEM_LENGTH];              // 64bytes  ????????
    OS_S8 szDevPosition[DEV_INFO_ITEM_LENGTH];               // 64bytes  ?è±¸Î»??
    OS_S8 szUserDefined1[DEV_USER_DEFINED_LENGTH];           // 64bytes  ?Ã»??Ô¶????Ö¶?1
    OS_S8 szUserDefined2[DEV_USER_DEFINED_LENGTH];           // 64bytes  ?Ã»??Ô¶????Ö¶?2
    OS_S8 szUserDefined3[DEV_USER_DEFINED_LENGTH];           // 64bytes  ?Ã»??Ô¶????Ö¶?3
    OS_S8 szUserDefined4[DEV_USER_DEFINED_LENGTH];           // 64bytes  ?Ã»??Ô¶????Ö¶?4
    OS_S8 video_monitor;                                     // 1bytes   ÊÓÆµ¼à¿Ø
    OS_S8 host_ip_addr[DEV_IP_ADDR_LENGTH];                  // ÈýÄ¿800W¼Ü¹¹ÖÐhost IP
    OS_U8 szResv[96];                                        // 128bytes ±£Áô×Ö¶Î
} IPNC_DeviceInfoExt, *PIPNC_DeviceInfoExt;

typedef struct IPNC_PrecordParams
{
    OS_S32 nSwitch;                                          // 0,off; 1,on
    OS_S32 nResv[28];                                        // ?????Ö¶?
} IPNC_PrecordParams, *PIPNC_PrecordParams;



typedef struct IPNC_Netlog_Info
{
    IN_ADDR         ip;
    OS_U16          port;
    OS_S16           enable;
    OS_S16           level;
    OS_S16           nresv[5];
} IPNC_Netlog_Info;

typedef struct IPNC_Serial_ports_show_Info
{
    IN_ADDR         ip;
    OS_U16          port;
    OS_S16          enable;
    OS_S16          nresv[6];
} IPNC_Serial_ports_show_Info;


typedef struct IPNC_syslog_info
{
    OS_U32 ratioErrCount;
    OS_U32 ratioErrTemp;
    OS_U32 noStreamErrCount;
    OS_U32 noStreamErrTemp;
    OS_U32 powerOnNum;
    OS_U32 resv[16];
} IPNC_syslog_info, *PIPNC_syslog_info;

typedef struct IPNC_DateTime
{
    OS_U16 wYear;
    OS_U16 wMonth;
    OS_U16 wDayOfWeek;
    OS_U16 wDay;
    OS_U16 wHour;
    OS_U16 wMinute;
    OS_U16 wSecond;
    OS_U16 wMilliseconds;
} IPNC_DateTime, *PIPNC_DateTime;

// ?è±¸????Ê±??

typedef enum
{
    WEST12 = -12,
    WEST11 = -11,
    WEST10 = -10,
    WEST9 = -9,
    WEST8 = -8,
    WEST7 = -7,
    WEST6 = -6,
    WEST5 = -5,
    WEST4 = -4,
    WEST3 = -3,
    WEST2 = -2,
    WEST1 = -1,
    GMT0 = 0,                                                // ??Ê±??
    EAST1 = 1,
    EAST2 = 2,
    EAST3 = 3,
    EAST4 = 4,
    EAST5 = 5,
    EAST6 = 6,
    EAST7 = 7,
    EAST8 = 8,
    EST9 = 9,
    EAST10 = 10,
    EAST11 = 11,
    EAST12 = 12
} ETimeZone;

typedef enum
{
    Rotation0 = 0,
    Rotation90 = 90,
    Rotation180 = 180,
    Rotation270 = 270
} EImageRotation;

typedef enum
{
    eCloseItsAWB = 0,                                        // ?Ø±??Ô¶???Æ½???ã·¨
    eOpenItsAWB = 1                                          // ?????Ô¶???Æ½???ã·¨
} EItsAWBSwitch;

// ITS ????
typedef struct IPNC_ITSControlParam
{
    OS_S32 nMaxExpotime;                                     // ????????
    OS_S32 nMinExpotime;                                     // ????????
    OS_S32 nMaxAgc;                                          // ????????

    // Í¼??????
    OS_S32 nBrightness;                                      // ?Á¶?
    OS_S32 nContrast;                                        // ?Ô±È¶?
    OS_S32 nSharpness;                                       // ????
    OS_S32 nJpegquality;                                     // ??Á¿
    OS_S32 nEcompensation;                                   // ?Ø¹â²¹??
    OS_S32 nGamma;
    OS_S32 nBlackLevel;                                      // ?Úµ?Æ½

    EItsAWBSwitch ItsAWBSwitch;                              // ?Ç·??Ø±??Ô¶???Æ½???ã·¨

    OS_S32 nRed;                                             // ??É«????
    OS_S32 nGreen;                                           // ??É«????
    OS_S32 nBlue;                                            // À¶É«????
} IPNC_ITSControlParam, *PIPNC_ITSControlParam;

typedef struct IPNC_ITSControlExParam
{
    OS_S32 nMaxExpotime;                                     // ????????
    OS_S32 nMinExpotime;                                     // ????????
    OS_S32 nMaxAgc;                                          // ????????
    // Í¼??????
    OS_S32 nBrightness;                                      // ?Á¶?
    OS_S32 nContrast;                                        // ?Ô±È¶?
    OS_S32 nSharpness;                                       // ????
    OS_S32 nJpegquality;                                     // ??Á¿
    OS_S32 nEcompensation;                                   // ?Ø¹â²¹??
    OS_S32 nGamma;                                           // Ù¤??Öµ
    OS_S32 nBlackLevel;                                      // ?Úµ?Æ½
    EItsAWBSwitch ItsAWBSwitch;                              // ?Ç·??Ø±??Ô¶???Æ½???ã·¨
    OS_S32 nRed;                                             // ??É«????
    OS_S32 nGreen;                                           // ??É«????
    OS_S32 nBlue;                                            // À¶É«????
    OS_S32 nMinAgc;                                          // ????????
} IPNC_ITSControlExParam, *PIPNC_ITSControlExParam;

#if 0
// Ò¹???Ö¶?Ä£Ê½
typedef struct IPNC_NightControlParam
{
    OS_S32 nExpoTime;                                        // ????
    OS_S32 nAgc;                                             // ????

    // Í¼??????
    OS_S32 nBrightness;                                      // ?Á¶?
    OS_S32 nContrast;                                        // ?Ô±È¶?
    OS_S32 nSharpness;                                       // ????
    OS_S32 nJpegquality;                                     // ??Á¿
    OS_S32 Reserve;                                          // ????

    enum
    {
        eCloseAWB = 0,                                       // ?Ø±??Ô¶???Æ½???ã·¨
        eOpenAWB = 1                                         // ?????Ô¶???Æ½???ã·¨
    } AWBSwitch;                                             // ?Ç·??Ø±??Ô¶???Æ½???ã·¨

    OS_S32 nRedGain;                                         // ??É«????
    OS_S32 nGreenGain;                                       // ??É«????
    OS_S32 nBlueGain;                                        // À¶É«????
    OS_S32 nGamma;
    OS_S32 nBlackLevel;                                      // ?Úµ?Æ½
} IPNC_NightControlParam, *PIPNC_NightControlParam;
#endif


// Ò¹???Ö¶?Ä£Ê½
typedef struct IPNC_NightControlParam
{
    OS_S32     nExpoTime;                                    // ????
    OS_S32     nAgc;                                         // ????

    // Í¼??????
    OS_S32     nBrightness;                                  // ?Á¶?
    OS_S32     nContrast;                                    // ?Ô±È¶?
    OS_S32     nSharpness;                                   // ????
    OS_S32     nJpegquality;                                 // ??Á¿
    OS_S32     Reserve;                                      // ????

    OS_U16 nNightAWBThershiold;                              // Ò¹????Æ½????Öµ 0-255
    OS_U16 nNightAWBSwitch;                                  // Ò¹????Æ½?â¿ª?? 0?Ø±? 1????

    OS_S32     nRedGain;                                     // ??É«????
    OS_S32     nGreenGain;                                   // ??É«????
    OS_S32     nBlueGain;                                    // À¶É«????
    OS_S32     nGamma;
    OS_S32     nBlackLevel;                                  // ?Úµ?Æ½
} IPNC_NightControlParam, *PIPNC_NightControlParam;


// for ntp use
typedef enum
{
    eMon = 1,                                                // ????Ò»
    eTus,                                                    // ???Ú¶?
    eWen,                                                    // ??????
    eThs,                                                    // ??????
    eFir,                                                    // ??????
    eSat,                                                    // ??????
    eSun,                                                    // ??????
} Week;

// ??SNTP????
typedef struct IPNC_NTP_FixedTime
{
    OS_S32 Type;                                             // ?Ì¶?Ê±??Ð£Ê±????0:Ã¿??1:Ã¿??
    Week week;                                               // ???? ???Ì¶?Ê±??ÎªÃ¿?Üµ?Ê±??Ê¹??
    IPNC_DateTime   FixTime;
} IPNC_NTP_FixedTime, *PIPNC_NTP_FixedTime;

typedef struct  IPNC_SNTPParam_Data
{
    OS_U32    bEnable;                                       // ?Ç·?????NTPÐ£Ê±
    OS_S32     iType;                                        // 0:????Ð£Ê± 1:?Ì¶?Ê±??Ð£Ê±
    OS_S32     nInterval;                                    // Ð£Ê±???ô£¨µ?Î»Ð¡Ê±??
    IPNC_NTP_FixedTime FixedTime;                            // ?Ì¶?Ê±??
    OS_S8        NTPAddr[MAX_DOMAIN_LEN];                    // IP??????
} IPNC_SNTPParam_Data, *PIPNC_SNTPParam_Data;

typedef struct IPNC_FlashLamp_Data_ex
{
    OS_U8 Lamp1To5_Type[5];                                  // ?Æµ???????0:LED 1:???? 2:Æµ?? 3:????
    OS_U8 FlashState;                                        // ?Æµ??Ä´???????  0:?????Ø´???1:?Â½??Ø´???
    OS_U8 StrobeState;                                       // ?ÆµÄ´???????0:Æµ?Áµ?:?????Ø´??????Áµ?:?ßµ?Æ½????1:Æµ?Áµ?:?Â½??Ø´??????Áµ?:?Íµ?Æ½????
    OS_U8 SteadyState;
    OS_U8 Lane[5];                                           // 5?õ³µµ?Ê¹?ÃµÄµÆº? Ôª??Öµ????0:?? 1:??1 2:??2 3:??3 4:??4 5:??5
    OS_U8 Setlampopentime[3];                                // ?Ö±???Ó¦Æµ?Á£?0?????Á¹â£¨1???Í³??Á£?2????Öµ????Ò¹?ä¿ª?Æ£?0???????ì¿ª?Æ£?1????È«?ì¿ª?Æ£?2??
    OS_U8 StrobelampInsertValue;                             // Æµ?ÁµÆ²?Öµ????
    OS_U8 nUseFlashLamp;
    OS_U8 PWtype;                                            // Æµ?Áµ??????????Ä·?Ê½1:???Ý¿??Å´?Ð¡2:?Ã»?????
    OS_U8 PWvalue;                                           // Æµ?Áµ?????????????Öµ,??Î§--5ms,Ö»???Ã»?????Ê±??Ð§
    OS_U8 Lamp6To10_Type[5];                                 // ¿¿¿¿¿0:¿ 1:LED 2:¿¿ 3:¿¿ 4:¿¿
    OS_U8 Channel;
    OS_U8 nReserved[20-5-1];                                 // ????
} IPNC_FlashLamp_Data_ex, *PIPNC_FlashLamp_Data_ex;

typedef struct IPNC_FlashLamp_Data
{
    OS_S32 Lamp1To4_Type;                                    // ?Æµ???????0:LED 1:????
    OS_S32 Lamp1To4_TriggState;                              // ?Æµ??Ä´???????  0:?????Ø´???1:?Â½??Ø´???
    OS_S32 Lamp5_Type;                                       // ?Æµ?????0:Æµ??1:????
    OS_S32 Lamp5_TriggState;                                 // ?ÆµÄ´???????0:Æµ?Áµ?:?????Ø´??????Áµ?:?ßµ?Æ½????1:Æµ?Áµ?:?Â½??Ø´??????Áµ?:?Íµ?Æ½????
    OS_S32 Lane[4];                                          // 4?õ³µµ?Ê¹?ÃµÄµÆº? Ôª??Öµ????1:??1 2:??2 3:??3 4:??4 5:??5
    OS_S32 iTurns;                                           // ?Ç·?????0:??????1: ????(1????Ê¹?Ãµ?1,2;2????Ê¹?Ãµ?3,4;LaneÖµ??Ð§)
    OS_S32 iForceFlashlamp;                                  // ?Ç·?Ç¿?Æ´????Á¹???0:??????1: ????
    OS_S32 iForceStrobelamp ;                                // ?Ç·?Ç¿?Æ´???Æµ?Áµ?0:??????1: ????
    OS_S32 StrobelampInsertValue;                            // Æµ?ÁµÆ²?Öµ????
    OS_S32 nUseFlashLamp;                                    // ??È¡?????Á¹??Æ¿???1:?? 2:??
    OS_U16 PWtype;                                           // Æµ?Áµ??????????Ä·?Ê½1:???Ý¿??Å´?Ð¡2:?Ã»?????
    OS_U16 PWvalue;                                          // Æµ?Áµ?????????????Öµ,??Î§--5ms,Ö»???Ã»?????Ê±??Ð§
    OS_S32 nReserved[4];                                     // ????
} IPNC_FlashLamp_Data, *PIPNC_FlashLamp_Data;

// NetWork ????struct in_addr  ip
typedef struct _IPNC_NetWorkParam
{
    IN_ADDR IPAddr;                                          // IP??Ö·
    IN_ADDR NetMask;                                         // ????????
    IN_ADDR Gateway;                                         // ????
} IPNC_NetWorkParam, *LPIPNC_NetWorkParam;

// FTP????
typedef struct IPNC_FTPParam
{
    enum
    {
        SDK_Upload = 0,                                      // ?Ï´???SDK
        FTP_Upload = 1                                       // ?Ï´???FTP??????
    } UploadPath;                                            // ???í´¥??Í¼Æ¬?Ï´???Ê½

    OS_S8 FTPAddr[MAX_DOMAIN_LEN];                           // 192.168.88.100 www.iXXX.com
    OS_U16 wPort;                                            // FTP?Ë¿?
    OS_U16 wEnable3G;                                        // ?Ç·?????3GÄ£Ê½??0:?????? 1:????)
    OS_S8 szUserName[USER_LEN];                              // ?Ã»???
    OS_S8 szPassword[PASSWORD_LEN];                          // ????
    OS_S8 szFolderPath[MAX_FILE_NAME];                       // Â·??
} IPNC_FTPParam, *PIPNC_FTPParam;

typedef struct IPNC_UploadUser
{
    OS_S32 nFTP;                                             // ftp?Ï´? 0:??????  1:Ô¤????
    OS_S32 nSDK;                                             // sdk?Ï´? 0:??????  1:Ô¤????
    OS_U8  enFtpIP;                                          // ????IP ?Ï´?
    OS_U8  enFtpDate;                                        // ?????????Ï´?
    OS_U8  enFtpHour;                                        // ????Ð¡Ê±?Ï´?
    OS_U8       content;                                     // ftp?Ï´?????(??????),2.0Æ½Ì¨?? 0Î»:Î¥??JPEGÍ¼Æ¬ 1Î»:????JPEGÍ¼Æ¬ 2Î»:INI?Ä¼?
    OS_U8       dir;                                         // ftpÄ¿Â¼?á¹¹,2.0Æ½Ì¨??0:??Ä¿Â¼1:Ò»??Ä¿Â¼2:????Ä¿Â¼3??????Ä¿Â¼4:?Ä¼?Ä¿Â¼5???å¼¶Ä¿Â¼
    OS_U8       folder[5];                                   // ftpÒ»??Ä¿Â¼,2.0Æ½Ì¨??0:IP??Ö·1:?è±¸????2:?è±¸Î»??3:?è±¸????4:?Ô¶?????Ï¢Ò»5:?Ô¶?????Ï¢??6:?Ô¶?????Ï¢??7:?Ô¶?????Ï¢??
    // 8:×¥??Ê±??9:×¥??????
    OS_U8   notused[2] ;                                     // ????
    OS_S32     nResv[2];                                     // ????
} IPNC_UploadUser, *PIPNC_UploadUser;

typedef struct IPNC_CHECKPOINT_LAMP
{
    OS_S32 everlamp;                                         // ???Áµ??Á¶È·?Î§
    OS_S32 flashlamp;                                        // ?Á¹????Á¶È·?Î§
    OS_S16 time;                                             // Ê±??
    OS_S16 Reserve;                                          // ????
    OS_S32 bReserve[9];                                      // ????
} IPNC_CHECKPOINT_LAMP, *PIPNC_CHECKPOINT_LAMP;


typedef struct IPNC_FactoryAlgLicense
{
    OS_S32     nFactoryID;
    OS_U8    szFactoryCode[16];                              // ???Ìµ??Ö·?????Ê¾????Ñ¡
    OS_S32     nResv[11];                                    // ????
    OS_U8    body[0];
} IPNC_FactoryAlgLicense, *PIPNC_FactoryAlgLicense;          // 64bytes

enum
{
    FACTORY_ALG_LIC_START = 0,
    FACTORY_ALG_LIC_VSDEVT,                                  // Î¬????Õ¹
    FACTORY_ALG_LIC_JINLING,                                 // ????Áª??
};

// SNTP????
typedef struct IPNC_SNTPParam
{
    OS_U32 bEnable;                                          // ?Ç·?????NTPÐ£Ê±
    OS_S32 nInterval;                                        // Ð£Ê±???ô£¨µ?Î»Ð¡Ê±??
    OS_U8 NTPAddr[MAX_DOMAIN_LEN];                           // 192.168.88.100 www.iXXX.com
} IPNC_SNTPParam, *PIPNC_SNTPParam;

enum
{
    IPNC_OSD_JPEG_NORMAL = 1,
    IPNC_OSD_JPEG_MERGE,
    IPNC_OSD_H264_VIDEO,
};

typedef struct IPNC_JPEG_OSDInfo                             // JPEG ????OSD ????????
{
    OS_U8 nDevPosition;                                      // ?è±¸Î»??
    OS_U8 nDevDirect;                                        // ?è±¸????
    OS_U8 nDevNO;                                            // ?è±¸????
    OS_U8 nDevName;                                          // ?è±¸????
    OS_U8 nIPAddr;                                           // IP??Ö·
    OS_U8 nSnapTime;                                         // ×¥??Ê±??
    OS_U8 nLance;                                            // ??????Ï¢
    OS_U8 nCarNumber;                                        // ???Æº???
    OS_U8 nwfType;                                           // Î¥??????
    OS_U8 nOsdTime;                                          // OSDÊ±??
    OS_U8 nSnapIndex;                                        // ×¥??????
    OS_U8 nCarColr;                                          // ??????É«
    OS_U8 nConfidence;                                       // ???Å¶?
    OS_U8 nSpeed;                                            // ????
    OS_U8 nOverSpeedrate;                                    // ???Ù±?
    OS_U8 nSnapType;                                         // ×¥??????
    OS_U8 nCarType;                                          // ??Á¾????
    OS_U8 nCarlogo;                                          // ????
    OS_U8 nCarColor;                                         // ??????É«
    OS_U8 nLimitSpeed;                                       // ????
    OS_U8 nCustom1;                                          // ?Ô¶???
    OS_U8 nCustom2;                                          // ?Ô¶???
    OS_U8 nCustom3;                                          // ?Ô¶???
    OS_U8 nCustom4;                                          // ?Ô¶???
    OS_S16 nX;                                               // ?à´¹Ö±??????Ôµ
    OS_S16 nY;                                               // ??Ë®Æ½??????Ôµ
    OS_U8 nInfoPosition;                                     // ????Î»??0:????1:????
    OS_U8 nFontSize;                                         // ??????Ð¡12,14,16,18,20,24
    OS_U8 nOsdRed;                                           // OSD??Ï¢??É«-??
    OS_U8 nOsdGreen;                                         // OSD??Ï¢??É«-??
    OS_U8 nOsdBule;                                          // OSD??Ï¢??É«-À¶
    OS_U8 nOneLineShow;                                      // ??????Ï¢Ò»????Ê¾0:??(??Ã¿????Ï¢????Õ¼??Ò»??) 1:??
    OS_U8 enable;                                            // ?Ç·?????OSD 0:??????1:????
    OS_U8 nmd5;                                              // ??Î±??
    OS_U8 nRedtime;                                          // ???Æº?Ê±??
     OS_U8 nResv[3];  //ÓëPC¶Ë±£³ÖÒ»ÖÂ
 
     OS_U8 nCarModel;// ³µÁ¾¿îÊ½ 
     OS_U8 nSlag;//: ÊÇ·ñÔüÍÁ³µ 
     OS_U8 nSunroof;//: ÓÐÎÞÌì´° 
     OS_U8 nSpareTire;//: ÓÐÎÞ±¸Ì¥ 
     OS_U8 nRack;//: ÓÐÎÞÐÐÀî¼Ü
     OS_U8 nBelt;//£ºÊÇ·ñÓÐÏµ°²È«´ø£¬
     OS_U8 nCall;//:  ÊÇ·ñ´òµç»°
     OS_U8 nCrash;//: ÊÇ·ñ ³µÁ¾×²Ëð 
     OS_U8 nDanger;//: ÊÇ·ñÎ£»¯Æ·³µÁ¾
 
    OS_U8 nCresv[15-9-3];                                    // ËÄ×Ö½Ú¶ÔÆë±£Áô×Ö¶Î
    OS_U8 order[64];                                         // ?æ´¢??????Á¿??Ë³??
} IPNC_JPEG_OSDInfo, *PIPNC_JPEG_OSDInfo;

typedef struct IPNC_Info_P2                                  // ?????Ä¼?????
{
    OS_U8 nDevPosition;                                      // ?è±¸Î»??
    OS_U8 nDevDirect;                                        // ?è±¸????
    OS_U8 nDevNO;                                            // ?è±¸????
    OS_U8 nDevName;                                          // ?è±¸????
    OS_U8 nIPAddr;                                           // IP??Ö·
    OS_U8 nSnapTime;                                         // ×¥??Ê±??
    OS_U8 nLance;                                            // ??????Ï¢
    OS_U8 nCarNumber;                                        // ???Æº???
    OS_U8 nwfType;                                           // Î¥??????
    OS_U8 nOsdTime;                                          // OSDÊ±??
    OS_U8 nSnapIndex;                                        // ×¥??????
    OS_U8 nCarColr;                                          // ??????É«
    OS_U8 nConfidence;                                       // ???Å¶?
    OS_U8 nSpeed;                                            // ????
    OS_U8 nOverSpeedrate;                                    // ???Ù±?
    OS_U8 nSnapType;                                         // ×¥??????
    OS_U8 nCarType;                                          // ??Á¾????
    OS_U8 nCarlogo;                                          // ????
    OS_U8 nCarColor;                                         // ??????É«
    OS_U8 nLimitSpeed;                                       // ????
    OS_U8 nCustom1;                                          // ?Ô¶???
    OS_U8 nCustom2;                                          // ?Ô¶???
    OS_U8 nCustom3;                                          // ?Ô¶???
    OS_U8 nCustom4;                                          // ?Ô¶???
    OS_S16 nX;                                               // ?à´¹Ö±??????Ôµ
    OS_S16 nY;                                               // ??Ë®Æ½??????Ôµ
    OS_U8 nInfoPosition;                                     // ????Î»??0:????1:????
    OS_U8 nFontSize;                                         // ??????Ð¡12,14,16,18,20,24
    OS_U8 nOsdRed;                                           // OSD??Ï¢??É«-??
    OS_U8 nOsdGreen;                                         // OSD??Ï¢??É«-??
    OS_U8 nOsdBule;                                          // OSD??Ï¢??É«-À¶
    OS_U8 nOneLineShow;                                      // ??????Ï¢Ò»????Ê¾0:??(??Ã¿????Ï¢????Õ¼??Ò»??) 1:??
    OS_U8 enable;                                            // ?Ç·????? 0:??????1:???? 2:FTP 3:SDK
    OS_U8 nmd5;                                              // ??Î±??
    OS_U8 nRedtime;                                          // ???Æº?Ê±??
    OS_U8 file_type;                                         // 0:xml  1:ini
    OS_U8 enTrafficFlow;                                     // Ê¹ÄÜ³µÁ÷Á¿Í³¼Æ²ÎÊý 0   ²»ÆôÓÃ£¬ 1 ÆôÓÃ
    OS_U8 nTrafficFlowTime;                                  // ³µÁ÷Á¿Í³¼ÆÊ±¼ä¶Î µ¥Î»·ÖÖÓ  ÓÐÐ§Öµ·¶Î§1-255 £¬
    OS_U8 nCarModel;// ³µÁ¾¿îÊ½ 
     OS_U8 nSlag;//: ÊÇ·ñÔüÍÁ³µ 
     OS_U8 nSunroof;//: ÓÐÎÞÌì´° 
     OS_U8 nSpareTire;//: ÓÐÎÞ±¸Ì¥ 
     OS_U8 nRack;//: ÓÐÎÞÐÐÀî¼Ü
     OS_U8 nBelt;//£ºÊÇ·ñÓÐÏµ°²È«´ø£¬
     OS_U8 nCall;//:  ÊÇ·ñ´òµç»°
     OS_U8 nCrash;//: ÊÇ·ñ ³µÁ¾×²Ëð 
     OS_U8 nDanger;//: ÊÇ·ñÎ£»¯Æ·³µÁ¾

    OS_U8 nCresv[12-9];                                        // ËÄ×Ö½Ú¶ÔÆë±£Áô×Ö¶Î
    OS_U8 order[64];                                         // ´æ´¢¸÷¸ö±äÁ¿µÄË³Ðò
} IPNC_Info_P2, *PIPNC_Info_P2;

typedef struct IPNC_VIDEO_OSDInfo                            // ??Æµ????OSD ????????(H264   CVBS  HD_SDI)
{
    OS_U8 nDevPosition;                                      // ?è±¸Î»??
    OS_U8 nDevDirect;                                        // ?è±¸????
    OS_U8 nDevNO;                                            // ?è±¸????
    OS_U8 nDevName;                                          // ?è±¸????

    OS_U8 nIPAddr;                                           // IP??Ö·
    OS_U8 nOsdTime;                                          // OSDÊ±??
    OS_U8 nResv[2];                                          // ?Ö½Ú¶??? ?????Ö¶?

    OS_U8 nCustom1;                                          // ?Ô¶???1
    OS_U8 nCustom2;                                          // ?Ô¶???2
    OS_U8 nCustom3;                                          // ?Ô¶???3
    OS_U8 nCustom4;                                          // ?Ô¶???4

    OS_S16 nX;                                               // ?à´¹Ö±??????Ôµ
    OS_S16 nY;                                               // ??Ë®Æ½??????Ôµ

    OS_U8 nInfoPosition;                                     // ????Î»?? 0:???? 1:????
    OS_U8 nFontSize;                                         // ??????Ð¡ 12,14,16,18,20,24
    OS_U8 nOsdRed;                                           // OSD??Ï¢??É«-??
    OS_U8 nOsdGreen;                                         // OSD??Ï¢??É«-??

    OS_U8 nOsdBule;                                          // OSD??Ï¢??É«-À¶
    OS_U8 nOneLineShow;                                      // ??????Ï¢Ò»????Ê¾ 0:??(??Ã¿????Ï¢????Õ¼??Ò»??) 1:??
    OS_U8 enable;                                            // ?Ç·?????OSD 0:?????? 1:????

    OS_U8 nCresv[9];                                         // ???Ö½Ú¶??ë¼°?????Ö¶?
    OS_U8 order[32];                                         // ?æ´¢??????Á¿??Ë³??
} IPNC_VIDEO_OSDInfo, *PIPNC_VIDEO_OSDInfo;

typedef struct IPNC_SYS_ExtOsdInfo
{
    IPNC_JPEG_OSDInfo stNormalJpgOsdCfg;                     // ???????Å¼?????OSD????
    IPNC_JPEG_OSDInfo stMergJpgOsdCfg;                       // ?Ï³?Í¼????Î¥?? OSD ????
    IPNC_VIDEO_OSDInfo stVideoOsdcfg;                        // H264??ÆµOSD???? Ä¿Ç°Ä¬?Ï¶?Â·??ÆµÊ¹??Ò»?×²???(H264   CVBS  HD_SDI)
    OS_S32 Resv[8];                                          // ?????Ö¶Îº???À©Õ¹Ê¹??
} IPNC_SYS_ExtOsdInfo;

typedef struct IPNC_APPINFO_P2
{
    IPNC_Info_P2  stappinfo_p2;
    OS_S32 Resv[8];
} IPNC_APPINFO_P2;

// OSD
typedef struct IPNC_OSDInfo
{
    OS_S32 bDevPosition;                                     // ?è±¸Î»??
    OS_S32 bIPAddr;                                          // IP??Ö·
    OS_S32 bRedLamp;                                         // ????Ê±??
    OS_S32 bSnapTime;                                        // ×¥??Ê±??
    OS_S32 bDevNO;                                           // ?è±¸????
    OS_S32 bDirection;                                       // ????????
    OS_S32 bCarNumber;                                       // ???Æº???
    OS_S32 bLance;                                           // ??????Ï¢
    OS_S32 bSnapNO;                                          // ×¥??????
    OS_S32 bSnapType;                                        // ×¥??????
    // ??????Ï¢ 0:?????? 1:????

    OS_S32 nInfoPosition;                                    // ????Î»?? 0:???? 1:????
    OS_S32 nY;                                               // y???ê£¬>=50

    // OSD??Ï¢??É«
    OS_S32 nOsdRed;                                          // ??
    OS_S32 nOsdGreen;                                        // ??
    OS_S32 nOsdBlue;                                         // À¶

} IPNC_OSDInfo, *PIPNC_OSDInfo;

// MULTI OSD
typedef struct IPNC_MULTI_OSDInfo
{
    OS_S32 nDevPosition;                                     //
    OS_S32 nIPAddr;                                          // IP
    OS_S32 nRedLamp;                                         //
    OS_S32 nAfterRedLamp;
    OS_S32 nSnapTime;                                        //
    OS_S32 nDevNO;                                           //
    OS_S32 nDirection;                                       //
    OS_S32 nCarNumber;                                       //
    OS_S32 nLance;                                           //
    OS_S32 nSnapNO;                                          //
    OS_S32 nSnapType;                                        //
    OS_S32 nSpeed;
    OS_S32 nMaxSpeed;
    OS_S32 nOverSpeedPer;
    //

    OS_S32 nX;
    OS_S32 nY;                                               // y>=50
    OS_S32 nInfoPosition;                                    //
    OS_S32 nFontSize;

    // OSDD
    OS_S32 nOsdRed;                                          //
    OS_S32 nOsdGreen;                                        //
    OS_S32 nOsdBlue;                                         //

    OS_S32 nOsdTime;
    OS_S32 nOneLineShow;
    OS_S32 nOsdChannel;
    OS_S32 nReserved[7];
} IPNC_MULTI_OSDInfo, *PIPNC_MULTI_OSDInfo;

typedef struct IPNC_OSDInfoEx
{
    OS_S32 bOSDTime;                                         // OSDÊ±?? 0:?????? 1:????
    OS_S32 bReserve[10];                                     // ????
} IPNC_OSDInfoEx, *PIPNC_OSDInfoEx;

// H264OSD
typedef struct IPNC_H264OSDInfo
{
    OS_S32 bDevPosition;                                     // ?è±¸Î»??
    OS_S32 bDevNO;                                           // ?è±¸????
    OS_S32 bTime;                                            // Ê±??
    OS_S32 bRev[20];                                         // ????
    // ??????Ï¢ 0:?????? 1:????

} IPNC_H264OSDInfo, *PIPNC_H264OSDInfo;


typedef struct _ITE_Time_Struct
{
    OS_U16 wYear;
    OS_U16 wMonth;
    OS_U16 wDay;
    OS_U16 wHour;
    OS_U16 wMinute;
    OS_U16 wSecond;
    OS_U16 wMilliseconds;
    OS_U16 wReserved;
} ITE_Time_Struct;


typedef struct KalgEncryptInfo
{
    OS_S32 isEncrypt;// 1 ????È¨     -1 Î´??È¨    ????Öµ Î´Öª
    OS_U8  secretID[8]; // ????Ð¾Æ¬ID HEX
    OS_U8  EncryptKey[128];// ??È¨??Ï¢ HEX
    OS_U8  resv[64];
} KalgEncryptInfo;



// ??È¡KÏµ??????????×´Ì¬?Ä½Ó¿?
typedef struct _KALStatus
{
    OS_S32 m3_vpss_count;                                    // m3_vpss??×´Ì¬????
    OS_S32 m3_video_count;                                   // m3_video×´Ì¬????
    OS_S32 dsp_count;                                        // dsp ×´Ì¬????
    OS_S32 arm_count;                                        // arm?É¼?????
    OS_S32 arm_to_dsp_count;                                 // arm???????Ý¸?DSP????
    OS_S32 reserved[10];                                     // ????
} KALStatus;


// ??È¡KÏµ??16????????×´Ì¬?Ä½Ó¿?
typedef struct _KALStorageStatus
{
    OS_S32 isExistSata;                                      // ?Ç·?????Ó²??
    OS_S32 partitionCount;                                   // ????????
    OS_S32 p1_total;                                         // ??Ò»???æ´¢??????Á¿
    OS_S32 p2_total;                                         // ?Ú¶????æ´¢??????Á¿
    OS_S32 p1_remain;                                        // ??Ò»???æ´¢??Ê£????Á¿
    OS_S32 p2_remain;                                        // ?Ú¶????æ´¢??Ê£????Á¿
    OS_S32 reserved[10];                                     // ????
} KALStorageStatus;

// ??È¡KÏµ??16????????×´Ì¬?Ä½Ó¿?
typedef struct _KALFormatStatus
{
    OS_S32 p1_format;                                        // ??Ò»???æ´¢????Ê½??????
    OS_S32 p2_format;                                        // ?Ú¶????æ´¢????Ê½??????
    OS_S32 reserved[10];                                     // ????
} KALFormatStatus;

typedef struct IPNC_RecvDataParam
{
    IN_ADDR IPAddr;                                          // IP??Ö·
    OS_S32 nType;                                            // 0-ÊµÊ± 1-??Ê·??  (????)
    OS_S32 rev[6];                                           // ?????Ö¶?
} IPNC_RecvDataParam, *PIPNC_RecvDataParam;

enum
{
    DGPIO_ALARM_INUSE = 0,                                   // ?Ç·?????
    DGPIO_ALARM_WHICHIO,                                     // ????IO
    DGPIO_ALARM_TYPE,                                        // ????????
    DGPIO_ALARM_Howmany,                                     // ×¥??????
    DGPIO_ALARM_FlashDelay,
    DGPIO_ALARM_ExpDelay,
    DGPIO_ALARM_Interval,                                    // ×¥?Ä¼???
    DGPIO_ALARM_CHAR,
    DGPIO_ALARM_TRAFFIC,                                     // ????????
    DGPIO_ALARM_Switch                                       //
};

#define BRT_DAGUERRE_BARRETT_ALARM_SIT_NUMBER 20
#define BRT_DAGUERRE_LAMP_NUMBER 4
typedef struct _BRT_SDK_BarrettGpioParam
{
    OS_U32 tRow_delay;                                       // ??????
    OS_U32 Daguerre_LampMode;                                // ?Á¹???-?Á¹???????1??led 2??????
    OS_U32 lamp_time;                                        // ?Á¹???-????Ê±??us
    OS_U32 lamp_Status[BRT_DAGUERRE_LAMP_NUMBER];            // ?Á¹???- ×´Ì¬(????????)
    OS_U32 set[BRT_DAGUERRE_BARRETT_ALARM_SIT_NUMBER][DGPIO_ALARM_Switch + 1];
} BRT_SDK_BarrettGpioParam, *LPBRT_SDK_BarrettGpioParam;


typedef struct IPNC_RS232Attri
{
    OS_S32 nBaudRate;                                        // ?????? 0:115200 1:57600 2:56000 3:38400 4:19200 5:14400 6:9600 7:4800
    OS_S32 nDataBits;                                        // ????Î» 0:7 1:8
    OS_S32 nParity;                                          // ??Å¼Î» 0:?? 1:Å¼ 2:??
    OS_S32 nStopBits;                                        // Í£Ö¹Î» 0:1 1:2
    OS_S32 ndataCtl;                                         // ????????  0:??
    OS_S32 nDeviceid;                                        // ?è±¸ID
    OS_S16    redlightdelay;                                 // ?????Å´?????Ê±Ê±?? ?â´¥?? rs485??????Ð§
    OS_S16    sResv;                                         // ????
    OS_S32      nResv[3];                                    // ????
} IPNC_RS232Attri, *PIPNC_RS232Attri;


typedef struct IPNC_RS485Attri
{
    OS_S32 nBaudRate;                                        // ?????? 115200 57600 56000 38400 19200 14400 9600 4800
    OS_S32 nDataBits;                                        // ????Î» 7 8
    OS_S32 nParity;                                          // ??Å¼Î» 0:?? 1:Å¼ 2:??
    OS_S32 nStopBits;                                        // Í£Ö¹Î» 1 2
    OS_S32 ndataCtl;                                         // ????????  0:??
    OS_S32 nDeviceid;                                        // ????????Ö·
    OS_S16   redlightdelay;                                  // ?????Å´?????Ê±Ê±??
    OS_S16   sResv;                                          // ????
    OS_S32     nResv[3];                                     // ????
} IPNC_RS485Attri, *PIPNC_RS485Attri;


typedef struct IPNC_CardDtAndLan
{
    OS_S32 nEnable;                                          // ?Ç·????Ã½??????? 0:??Ê¹?? 1:Ê¹??
    OS_S32 nLanNum;                                          // ????
} IPNC_CardDtAndLan, *PIPNC_CardDtAndLan;


typedef struct IPNC_CaptureNum
{
    OS_S32 nEnable1;                                         // ????×¥?????? 0:Ê¹?? 1:??Ê¹??
    OS_S32 nEnable2;                                         // ???Ú³???×¥?????? 0:Ê¹?? 1:??Ê¹??
} IPNC_CaptureNum, *PIPNC_CaptureNum;


// RS232
typedef struct IPNC_RS232Prm
{
    OS_S32 nindex;                                           // ??Ó¦?????????×´?????
    IPNC_CardDtAndLan stuCL;
    IPNC_CaptureNum stuCN;
    IPNC_RS232Attri stuRA;
} IPNC_RS232Prm, *PIPNC_RS232Prm;


// RS485
typedef struct IPNC_RS485Prm
{
    OS_S32 nindex;                                           // ??Ó¦?????????×´?????
    IPNC_CardDtAndLan stuCL;
    IPNC_CaptureNum stuCN;
    IPNC_RS232Attri stuRA;
} IPNC_RS485Prm, *PIPNC_RS485Prm;

#define ROAD_COUNT 4
typedef struct IPNC_RoadInfo
{
    OS_S32 nType;                                            // ???? 1:io???? 2:?????????? 3:?×´?????
    OS_S32 nEnable;                                          // ?Ð²???Ê¹?? 1:Ê¹??  0:??Ö¹
    OS_F32 fDistance;                                        // ??È¦????
    OS_F32 fSpeedMax;                                        // ????
    OS_S32 nPrecentMaxSpeed;                                 // ???Ù°Ù·Ö±? [0??100]
    OS_S32 nPrecentCorrect;                                  // ?Ù¶È½????Ù·Ö±? [10~200]
    OS_S32 nCount;                                           // ????×¥?????? 0 1 2 3
    OS_S32 nSpeedCount;                                      // ????×¥?????? 0 1 2 3
    OS_S32 nDelay;                                           // Ê±?????? ??Î»:ms
    OS_F32   fBigCarSpeedMax;                                // ????????
    OS_S32 nReserve[7];                                      // ????
} IPNC_RoadInfo, *PIPNC_RoadInfo;

typedef struct IPNC_SpeedInfo
{
    IPNC_RoadInfo stuRoadInfo[ROAD_COUNT];
    OS_S32 nSame;                                            // 0:??Í¬  1:??Í¬ windows Ê¹??
    OS_S32 nResv[3];
} IPNC_SpeedInfo, *PIPNC_SpeedInfo;


// ????×¥?Ä¿??????æ·¶Î§
typedef struct IPNC_QuickSnapParam
{
    OS_S32 nExp;                                             // ?Ù·Ö±? 1--300
    OS_S32 nGain;                                            // ?Ù·Ö±? 1--300
    OS_S32 nUseSecondParm;                                   // ?Ç·??ô¶¯¶??×²???????0????1??????
    OS_S32 nMaxExp;
    OS_S32 nMaxGain;
    OS_S32 nResv[7];
} IPNC_QuickSnapParam, *PIPNC_QuickSnapParam;


// Í¸?÷´®¿?????????
typedef struct IPNC_TransparentSerial
{
    OS_S32 nBaudRate;                                        // ?????? 0:115200 1:57600 2:56000 3:38400 4:19200 5:14400 6:9600 7:4800
    OS_S32 nDataBits;                                        // ????Î» 0:7 1:8
    OS_S32 nParity;                                          // ??Å¼Î» 0:?? 1:Å¼ 2:??
    OS_S32 nStopBits;                                        // Í£Ö¹Î» 0:1 1:2
    OS_S32 ndataCtl;                                         // ????????  0:??
    OS_S32 nResv[4];                                         // ????
} IPNC_TransparentSerial, *PIPNC_TransparentSerial;



// ?Ø¹?Ê±??????
typedef struct IPNC_TimeFrameInterval
{
    OS_S32 nTimeFrame;                                       // ???Ãµ?Ê±??
    OS_S32 nRealTimeFrame;                                   // Êµ??Ê±??(Ö»??)
    OS_S32 nACSTimeFrame;                                    // ????Í¬??Ê±Ê±??(Ö»??)
    OS_S32 nResv[5];                                         // ????
} IPNC_TimeFrameInterval, *PIPNC_TimeFrameInterval;


typedef struct IPNC_RedLightEx
{
    OS_S32   nCoffCorrection;                                // fY; 0~512  ????Ð£??Ïµ??
    OS_F32 fCoffCheck;                                       // fU; 1.0~3.0 ????????????Ïµ??
    OS_S32   nExpTime;                                       // nfV;1~1000(10us) ?Ø¹?Ê±??
    OS_U16 reg257;                                           // ?Ä´???0x257 ??8Î»?Çº?????Ç¿??????????Öµ????8Î»Îª????????Öµ
    OS_U16 reg204;                                           // ?Ä´???0x204  ??8Î»?Ç¿???Öµ?Ð¾????? ??8Î»???????Ð¾?????
    OS_U16 reg211;                                           // ?Ä´???0x211 Ö»?Ãµ?8Î» ???????ä·¢??Ê±??Ð¡??Öµ??
    OS_U16 reg1c1;                                           // ?Ä´???0x1c1 Ö»?Ãµ???8Î» ??????????É«??Ê±??Ð¡??Öµ??
    OS_S32 nResv[2];                                         // ????
} IPNC_RedLightEx, *PIPNC_RedLightEx;


// kepler????Í¨?À·?????????????
typedef struct IPNC_KeplerTDConfig
{
    OS_U8 szTDServerIP[20];                                  // ??????IP
    OS_U16 sTDServerPort;                                    // ???????Ë¿?
    OS_U16 sReserved;                                        // ?????Ö¶?
    OS_S32 resv[20];
} IPNC_KeplerTDConfig, *PIPNC_KeplerTDConfig;




#define RED_STRENGTH_WIN_NUM    6
typedef struct _venc_vect_win_param
{
    OS_S32 nLeft;                                            // ???Ï½?X
    OS_S32 nTop;                                             // ???Ï½?Y
    OS_S32 nRight;                                           // ???Â½?X
    OS_S32 nBottom;                                          // ???Â½?Y
    OS_S32 nReserved;
} venc_vect_win_param;

typedef struct _red_strengthen_info
{
    OS_S32 nEnable;
    OS_S32 nNum;
    OS_S32 nReseved;
    venc_vect_win_param stWinInfo[8];
} red_strengthen_info;




typedef struct IPNC_SoftSnapParam
{
    OS_S32     nCount;                                       // ????
    OS_S32     nDelay;                                       // ×¥????Ê±
    OS_S32     nFlash;                                       // ×¥?ÄµÄ¶?Ó¦?Æ°?Î»????
    OS_S32     nLane;                                        // ????
    OS_S32     nSpeed;                                       // ????
    OS_S32     nMaxSpeed;                                    // ?????Ù¶?
    OS_U8    szCarNum[16];                                   // ????
    OS_S32     pContext;                                     // ????????Ï¢

    OS_S32     nindex;                                       // ×¥??????
    OS_S32     nRredLamptime;                                // ???Æº?Ê±??(ms)
    OS_S32     nResv[7];                                     // ????
} IPNC_SoftSnapParam, *PIPNC_SoftSnapParam;


// FTP?Ï´??Ä¼???????
#define FILE_NAME_ELEMENT 8
typedef struct IPNC_PicFileName
{
    enum
    {
        FNE_NON = 0,                                         // ??Ð§
        FNE_DEV_IP = 1,                                      // IP??Ö·
        FNE_DEV_SEQUENCE,                                    // Á¬??????????
        FNE_DEV_TRI_TIME,                                    // ????Ê±??
        FNE_DEV_TRAFFIC_TIME,                                // ???Æº??à³¤Ê±??
        FNE_DEV_SUFFIXES,                                    // ??×º
        FNE_DEV_NUMBER                                       // ????????
    } PicName[FILE_NAME_ELEMENT];
    OS_U8 Suffix[FILE_NAME_ELEMENT];                         // "-" "_"
} IPNC_PicFileName, *PIPNC_PicFileName;

typedef enum
{
    // ??Ï¢?? ???? ????Ï¢???Ãµ??ã·¨
    OSD_JNON = 0,                                            // ??Ð§
    OSD_DEVPOSITION,                                         // ?è±¸Î»?? ????,ITARGE
    OSD_DEVDIRECT,                                           // ?è±¸???? ????,ITARGE
    OSD_DEVNO,                                               // ?è±¸???? ????,ITARGE
    OSD_IPADDR,                                              // IP??Ö· ????,ITARGE
    OSD_SNAPTIME,                                            // ×¥??Ê±?? ????,ITARGE
    OSD_LANCE,                                               // ??????Ï¢ ????,ITARGE
    OSD_CARNUMBER,                                           // ???Æº??? ????,ITARGE
    OSD_OSDTIME,                                             // OSDÊ±?? ????
    OSD_WFTYPE,                                              // Î¥?????? ????
    OSD_CARINFO,                                             // ??????Ï¢ ????
    OSD_SNAPINDEX,                                           // ×¥?????? ITARGE
    OSD_CARCOLR,                                             // ??????É« ITARGE
    OSD_CONFIDENCE,                                          // ???Å¶? ITARGE
    OSD_SPEED,                                               // ???? ITARGE
    OSD_OVERSPEEDRATE,                                       // ???Ù±? ITARGE
    OSD_SNAPTYPE,                                            // ×¥?????? ITARGE
    OSD_CARTYPE,                                             // ??Á¾???? ITARGE
    OSD_CARLOGO,                                             // ???? ITARGE
    OSD_LIMITSPEED,                                          // ???? ITARGE
    OSD_DEVNAME,                                             // ?è±¸???? ITARGE
    OSD_CARCOLOR,                                            // ??????É« ITARGE
    OSD_CUSTOM1,                                             // ?Ô¶???1 ITARGE
    OSD_CUSTOM2,                                             // ?Ô¶???2 ITARGE
    OSD_CUSTOM3,                                             // ?Ô¶???3 ITARGE
    OSD_CUSTOM4,                                             // ?Ô¶???4 ITARGE
    OSD_MD5,                                                 // MD5??Î±??        ITARGE
    OSD_RED_TIME                                             // ???Æº?Ê±??
} ALG_OSDInfo;


typedef struct IPNC_ALG_OSDInfo                              // ?ã·¨OSD
{
    OS_S16 nDevPosition;                                     // ?è±¸Î»??
    OS_S16 nDevDirect;                                       // ?è±¸????
    OS_S16 nDevNO;                                           // ?è±¸????
    OS_S16 nIPAddr;                                          // IP??Ö·
    OS_S16 nSnapTime;                                        // ×¥??Ê±??
    OS_S16 nLance;                                           // ??????Ï¢
    OS_S16 nCarNumber;                                       // ???Æº???

    OS_S16 nX;                                               // ?à´¹Ö±??????Ôµ
    OS_S16 nY;                                               // ??Ë®Æ½??????Ôµ
    OS_S16 nInfoPosition;                                    // ????Î»?? 0:???? 1:????
    OS_S16 nFontSize;                                        // ??????Ð¡ 12,14,16,18,20,24
    OS_S16 nOsdRed;                                          // OSD??Ï¢??É«-??
    OS_S16 nOsdGreen;                                        // OSD??Ï¢??É«-??
    OS_S16 nOsdBule;                                         // OSD??Ï¢??É«-À¶
    OS_S16 nOsdTime;                                         // OSDÊ±??
    OS_S16 nOneLineShow;                                     // ??????Ï¢Ò»????Ê¾ 0:??(??Ã¿????Ï¢????Õ¼??Ò»??) 1:??
    OS_S16 nwfType;                                          // Î¥??????
    OS_S16 nCarinfo;                                         // ??????Ï¢

    OS_S16 nSnapIndex;                                       // ×¥??????
    OS_S16 nCarColr;                                         // ??????É«
    OS_S16 nConfidence;                                      // ???Å¶?
    OS_S16 nSpeed;                                           // ????
    OS_S16 nOverSpeedrate;                                   // ???Ù±?
    OS_S16 nSnapType;                                        // ×¥??????
    OS_S16 nCarType;                                         // ??Á¾????
    OS_S16 nCarlogo;                                         // ????
    OS_S16 nLimitSpeed;                                      // ????
    OS_U8 DevName;                                           // ?è±¸????
    OS_U8 CarColor;                                          // ??????É«
    OS_U8 custom1;                                           // ?Ô¶???1
    OS_U8 custom2;                                           // ?Ô¶???2
    OS_U8 custom3;                                           // ?Ô¶???3
    OS_U8 custom4;                                           // ?Ô¶???4

    OS_U8 Devdirect[32];                                     // ?è±¸????
    OS_U8 DevNO[32];                                         // ?è±¸????
    OS_U8 DevPos[128];                                       // ?è±¸Î»??
    OS_U8 order[48];                                         // ?æ´¢??????Á¿??Ë³??
    OS_U8 osdtype;                                           // OSD???????? 1:????Í¼Æ¬ 2:?Ï³?Í¼Æ¬ 3:??Æµ
    OS_U8 enable;                                            // ?Ç·?????OSD 0:?????? 1:????
    OS_U8 Recv[590];                                         // ??????
} IPNC_ALG_OSDInfo, *PIPNC_ALG_OSDInfo;



typedef enum
{
    // ??Ï¢?? ???? ????Ï¢???Ãµ??ã·¨
    FNE_JNON = 0,                                            // ??Ð§
    FNE_JIP = 1,                                             // IP??Ö· ????,ITARGE
    FNE_JTIME,                                               // Ê±?? ????,ITARGE
    FNE_JLANE_INFO,                                          // ??????Ï¢ ????,ITARGE
    FNE_JDEV_INFO,                                           // ?è±¸??Ï¢ ????
    FNE_JDEV_DIR,                                            // ?è±¸???? ????
    FNE_JDEV_TYPE,                                           // Î¥?????? ????
    FNE_JDEV_CARINFO,                                        // ??????Ï¢ ????
    FILE_DEV_POS,                                            // ?è±¸Î»?? ITARGE
    FILE_SNAP_TYPE,                                          // ×¥?????? ITARGE
    FILE_PIC_INDEX,                                          // ×¥?????? ITARGE
    FILE_PLATE_NUM,                                          // ???Æº??? ITARGE
    FILE_PLATE_COL,                                          // ??????É« ITARGE
    FILE_CONFIDENCE,                                         // ???Å¶? ITARGE
    FILE_CAR_TYPE,                                           // ??Á¾???? ITARGE
    FILE_SPEED,                                              // ?Ù¶? ITARGE
    FILE_OVERSPEED_RATE,                                     // ???Ù±? ITARGE
    FILE_LIMITSPEED,                                         // ???? ITARGE
    FILE_DEV_NUM,                                            // ?è±¸???? ITARGE
    FILE_DEV_NAME,                                           // ?è±¸???? ITARGE
    FILE_CUSTOM1,                                            // ?è±¸???? ITARGE
    FILE_CUSTOM2,                                            // ?è±¸???? ITARGE
    FILE_CUSTOM3,                                            // ?è±¸???? ITARGE
    FILE_CUSTOM4,                                            // ?è±¸???? ITARGE
    FILE_CAR_COLOR,                                          // ??????É« ITARGE
    FILE_RED_TIME,                                           // ???Æº?Ê±??
    FILE_CAR_BODY_POS,                                       // ????????
    FILE_CAR_PL_POS                                          // ????????
} ALG_FileName;

// ?ã·¨?Ä¼???????
typedef struct IPNC_ALG_FileName
{
    OS_S32 nNum;                                             // ??????Ï¢????
    OS_U8 link;                                              // Á¬?Ó·? "_"?? "??"
    OS_U8 ALG_linkElement[25];                               // ?????Ä¼???Ôª????Ï¢ ????ÖµÎªALG_FileName??Öµ;
    OS_S16 ver;                                              // ????
    OS_S32  nrev[3];                                         // ????
} IPNC_ALG_FileName, *PIPNC_ALG_FileName;


typedef struct _VirtualDir_Time
{
    OS_S32 nh264Duartion;                                    // h264(1-10)????
    OS_S32 nRev[4];
} VirtualDir_Time;



typedef enum
{
    E_SIP_SPECIAL_TYPE_STANDARD = 0,
    E_SIP_SPECIAL_TYPE_VISS     = 32
} E_SIP_SPECIAL_TYPE;

typedef struct AppSpecial_viss
{
    OS_S32 rtpOverFlag;
    OS_S8 cameraId[21];                                      // camara????
    OS_U8 resv[3];
} AppSpecial_viss;

typedef struct App_CwmpInfo_t
{
    int     cwmp_enable;// 0 disable    1 enable
    char  acs_url[64];  //Íø¹ÜÆ½Ì¨·þÎñÆ÷URL
    char  acs_user[32];//Íø¹ÜÆ½Ì¨ÕËºÅ
    char  acs_pwd[32];//Íø¹ÜÆ½Ì¨ÃÜÂë
    int   acs_HBperiodic;// Æ½Ì¨ÐÄÌøÖÜÆÚ
    int   rev;//±£Áô
}App_CwmpInfo;

typedef struct _IPNC_SipIpcConfig
{
    OS_U8  sipIpcVersion[4];                                 // sip ipc ???Ã°æ±¾.
    OS_U16 sipSpecialAppType;                                // ?Ø»?????
    OS_U16 bUseSipDevice ;                                   // ?????è±¸??Ö¾
    OS_S8 sipRegServerUID[21];                               // ×¢??SIP??????????
    OS_S8 sipRegServerDomain[11];                            // ×¢??SIP??????????
    OS_S8 sipRegServerIP[16];                                // ×¢??SIP??????IP
    OS_S8 sipRegServerPwd[32];                               // SIP?è±¸×¢??????(??×¢??????????Ö¤)
    OS_U16 sipRegServerPort ;                                // ×¢??SIP???????Ë¿?
    OS_U16 sipDevicePort ;                                   // ?è±¸???Ø¶Ë¿?
    OS_S8 sipDeviceUID[21];                                  // SIP?è±¸????
    OS_S8 sipDeviceDoman[11] ;                               // sip?è±¸????
    OS_S32 regExpire_s ;                                     // ×¢????Ð§??(??)
    OS_U16 sipDevHBCycle_s;                                  // ?è±¸????????(??)
    OS_U16 sipDevHBOutTimes;                                 // ?è±¸??Ê±????????
    OS_S8 sipAlarmID[24];                                    // ±¨¾¯Í¨µÀID±àºÅ
    OS_S8 sipVideoChannelID[3][24];                          // ÊÓÆµÍ¨µÀID±àºÅ
    OS_U8 resv[120-24-72];                            // for comm ±£Áô×Ö
    AppSpecial_viss sip_viss;
    App_CwmpInfo  viss_cwmp;       //¶Ô½ÓÍø¹ÜÆ½Ì¨²ÎÊý
    char specialVerData[256-28-140]; //ÌØ»¯°æ±¾Êý¾ÝÇø
} IPNC_SipIpcConfig;

typedef struct IPNC_RESTARTParam_Data
{
    OS_S32 iEnable;                                          // ?Ç·????????? 0?????? 1???????? 2?Ì¶?Ê±??????
    OS_S32 nInterval;                                        // ???????ô£¨µ?Î»?Ö£?
    IPNC_DateTime FixedTime;                                 // ?Ì¶?Ê±????????????????Ê¼Ê±??
    OS_S32 revr[5];
} IPNC_RESTARTParam_Data;



typedef struct IPNC_WDRInfo
{
    OS_S32 bUseable;                                         // 0 ?Ø±?1????
    OS_S32 bValue;                                           // ??Öµ-5 Ä¬??Îª
    OS_U16 value;                                            // ????Ë«Ä¿È«??Í¼??  ???Ò±??Ëµ???
    OS_U16 Rev;                                              // ????
    OS_S32 bRev[2];                                          // ????
} IPNC_WDRInfo, *PIPNC_WDRInfo;


// ?????Ð½á¹¹??
typedef struct CutLineInfo
{
    OS_S32 bOpen;                                            // 0 ?Ø±Õ´????? 1???ô´³½???
    OS_S32 LaneNum;                                          // ?????Ð³???????(??Î§1-3) ??2?ö³µµ?(1??2)??Ñ¡  ????Ñ¡??Ò»?ö³µµ?  ??Öµ1=????1 ??Öµ2=????2 ??Öµ3=????1+????2
    OS_S32 initLaneSeq;                                      // ??Ê¼???Àº?(??Î§0-9)
    OS_S32 nRev[20];                                         // ????
} CutLineInfo, *PCutLineInfo;

enum
{
    CODEC_FIRST_AE_PARAM = 0,
    CODEC_SECOND_AE_PARAM,
};
enum
{
    CODEC_MJPG_RESO_PARAM = 0,
    CODEC_H264_RESO_PARAM,
};
#define IPNC_RESO_SELECT_NUM (8)
typedef struct IPNC_ResoInfo
{
    OS_S32 width;
    OS_S32 height;
    OS_S32 resv;
} IPNC_ResoInfo;

typedef struct IPNC_CodecAttri
{
    OS_S32             num;
    IPNC_ResoInfo   ResoInfo[IPNC_RESO_SELECT_NUM];
} IPNC_CodecAttri, *PIPNC_CodecAttri;

// !channel config info
typedef struct IPNC_CodecConfigAttri
{
    OS_S32     nChlID;
    OS_S32       width;
    OS_S32       height;
    OS_S32     nIFrmInterval;
    OS_S32        nCodecProfile;                             // 0:baseline 1: main 2:high
    OS_S32        nBitCtrl;                                  // 0:vbr 1:cbr
    OS_S32        nBitrate;
    OS_S32     nResv[24];
} IPNC_CodecConfigAttri, *PIPNC_CodecConfigAttri;

typedef struct IPNC_AESecondParam
{
    OS_S32     nEnable;
    OS_S32     nExp;
    OS_S32     nGain;
    OS_S32     nMaxExp;
    OS_S32     nMinExp;
    OS_S32     nMaxGain;
    OS_S32     nMinGain;
    OS_S32     nResv[24];
} IPNC_AESecondParam, *PIPNC_AESecondParam;

#define PATH_LNE_MAX 512
typedef struct IPNC_DirName
{
    OS_U8        type;                                       // ???????? '0':Ä¿Â¼  '1':?Ä¼?
    OS_U8        szName[0];                                  // ??Ä¿Â¼???????Ä¼???
} IPNC_DirName, *PIPNC_DirName;

typedef struct IPNC_FileDir
{
    OS_S32 nCount;                                           // ????????
    OS_U8 body[0];                                           // ??????Ï¢
} IPNC_FileDir, *PIPNC_FileDir;


#define PACKET_ASYN_HEADER  (0xA55CA55C)
typedef enum
{
    AVI    = 1,
    CONFIG = 2,
    H264Frame = 3,
    JpegFrame = 4
} recvDataType;                                              // ????????

typedef struct recvDataHead
{
    OS_U32        syncHeader;                                // Í¬??Í·0xA55CA55C;
    recvDataType type;                                       // ????????
    OS_U8 datanamebuf[1024];                                 // ?Ä¼???È«Â·??
    OS_S32  datanamelen;                                     // ?Ä¼???È«Â·?????? strlen
    OS_U32 recvdataLen;                                      // ??Òª???Õµ????Ý³??? (?????Ý²????Ã³???size of OS_U32)
} recvDataHead;
struct H264FrameParm
{
    OS_F32 nFrame;
    OS_U16 nWidth;
    OS_U16 nHeight;
    OS_S32 nRev[4];
};

//
// ?Á¹???
//
typedef struct IPNC_FlashLamp
{
    enum EFlashLampType
    {
        eLED = 1,                                            // LED??
        eGas,                                                // ??????
        eStroboFlash,                                        // Æµ?Áµ?
        eLight                                               // ???Áµ?
    } Type;                                                  // ????

    enum EFlashLampTriggState
    {
        eClose = 0,                                          // ????
        eOpen,                                               // ????
    } TriggState;                                            // ????????

    OS_S32 Pulse;                                            // ????????????us
    OS_S32 Timelag;                                          // ??????Ê±us
    OS_S32 SnapTimelag;                                      // ×¥????Ê±us
    OS_S32 Reserved;
} IPNC_FlashLamp, *PIPNC_FlashLamp;

//
// ????????????
//

// ???Ã´???????Ê±??Òª??È·????????TTL????????485????
// Á½?????Í´??????Í²???Í¬Ê±Ê¹??
typedef enum
{
    eTTL1 = 0x01,
    eTTL2,
    eTTL3,
    eTTL4,
    eTTL5,
    eTTL6,
    eTTL7,
    eTTL8
} ETriggInput;                                               // Ö§??8Â·????????

typedef enum
{
    eTrailingEdge = 0,                                       // ?Â½???
    eRisingEdge                                              // ??????
} ETriggEdge;                                                // ?Ø¸???È¦????????

typedef enum
{
    eLowLevel = 0,                                           // ?Íµ?Æ½
    eHighLevel                                               // ?ßµ?Æ½
} ETriggLevel;                                               // ???Ìµ???È¦????????

typedef enum
{
    eNot = 0,
    eAnd = 1
} EOperator;                                                 // ????????????????????

// ????
#define ALARM_SIT_NUMBER 16
#define LAMP_NUMBER 4

typedef enum
{
    eDriveWayNON = 0,                                        // ?Þ³?????Ï¢
    eDriveWay1 = 1,                                          // 1????
    eDriveWay2,                                              // 2????
    eDriveWay3,                                              // 3????
    eDriveWay4                                               // 4????
} EDriveWay;

typedef struct IPNC_SnapCondition
{
    OS_U32 bEnable;                                          // ?Ç·???Ð§
    EDriveWay DriveWay;                                      // ???ô³µµ?
    ETriggInput TriggInput1;                                 // ????????1
    ETriggEdge Input1TriggEdge;                              // ????1×´Ì¬
    EOperator Operator;                                      // ??????
    ETriggInput TriggInput2;                                 // ????????2
    ETriggLevel Input2TriggLevel;                            // ????2×´Ì¬
    OS_S32 nSnapNumber;                                      // ×¥??????
    OS_S32 nSnapInterval;                                    // ×¥?Ä¼???ms
    OS_U8 chFileNameSuffix[4];                               // ?????????Ä¼?????×º??2-3??????Ê¾?Ö·?
    OS_U32 bFlashLamp[LAMP_NUMBER];                          // ?????Á¹???
    OS_U32 bTurns;                                           // ?Ç·?????
} IPNC_SnapCondition, *PIPNC_SnapCondition;

// ????????????
typedef struct IPNC_TriggInputSet
{
    IPNC_SnapCondition SnapCondition[ALARM_SIT_NUMBER];      // Ö§??16??????????
} IPNC_TriggInputSet, *PIPNC_TriggInputSet;

// ?????Ä¼?????
typedef enum
{
    eConfigFile_All,                                         // È«????????Ï¢
    eConfigFile_Network,                                     // ??????????Ï¢
    eConfigFile_TriggInputSet                                // ????????????????
} EConfigFileType;

// ????IPNC??IPNCÓ¦????Ï¢
#define MAC_LENGTH              6                            // Length of MAC address.
#define RESERVED_LENGTH         8                            // Length of MAC address.
typedef struct IPNC_Info
{
    IN_ADDR IPAddr;                                          // IP??Ö·
    IN_ADDR NetMask;                                         // ????????
    IN_ADDR Gateway;                                         // ????
    OS_U8 MacAddr[MAC_LENGTH];                               // ?è±¸MAC??Ö·
    OS_U8 Reserved[2];                                       // ????

    OS_S32 nCtrlPort;                                        // ???Æ¶Ë¿?

    OS_U8 szDeviceName[DEVICE_NAME_LENGTH];                  // ?è±¸???? Ö»??
    OS_U8 szDeviceAppVer[DEVICE_APPVER_LENGTH];              // ?è±¸Ç¶??Ê½?????æ±¾
    // Ö»??
    OS_U8 sdkReserved1[DEVICE_RESERVED_LENGTH];              // SDK????,?Ã»???ÒªÊ¹?Ãº??Þ¸?

    OS_U8 szDeviceNumber[DEVICE_NUMBER_LENGTH];              // ?è±¸????
    OS_U8 szDeviceDirection[DEVICE_DIRECTIONLENGTH];         // ????????
    OS_U8 szDevicePosition[DEVICE_POSITION_LENGTH];          // ?è±¸Î»??
    OS_U8 sdkReserved2[RESERVED_LENGTH];                     // SDK????,?Ã»???ÒªÊ¹?Ãº??Þ¸?
} IPNC_Info, *PIPNC_Info;

/************************IPNC answer info******************************/
#define DEVICE_SECRET_ID_LENGTH 8
typedef struct IPNC_AnswerInfo
{
    struct in_addr szIPAddr;                                 // ?è±¸ IP ??Ö·
    struct in_addr szSubnetMask;                             // ?è±¸????????
    struct in_addr szGateway;                                // ?è±¸????
    OS_U8 szMacAddr[MAC_LENGTH];                             // ?è±¸MAC??Ö·
    OS_U8 product_name[32];
    OS_U8 product_version[32];
    OS_U8 nicp_version[32];
    OS_U8 alg_version[32];
    OS_U8 build_time[32];
    OS_S32 nTransPort;                                       // ?????Ë¿?,?????Ë¿?????×´Ì¬????
    OS_S32 nCtrlPort;                                        // ???Æ¶Ë¿?
    OS_U8 device_number[DEVICE_NUMBER_LENGTH];
    OS_U8 device_direction[DEVICE_DIRECTIONLENGTH];
    OS_U8 device_position[DEVICE_POSITION_LENGTH];
    OS_U8 device_type[DEVICE_TYPE_LENGTH];
    OS_U8 device_sn[DEVICE_SN_LENGTH];
    OS_U8 secret_id[DEVICE_SECRET_ID_LENGTH];
    OS_U32 kernel_version;                                   // kernel?æ±¾?? 368-> OS_U8 kernalVer[4];
    OS_U8 szEncrypt;                                         // ?Ç·????? 1:???? 0:Î´????
    OS_U8 szMacType;                                         // 0:????????mac 1:yihulu mac
    OS_U8 szReserved[2];                                     // ????
    OS_S16 ddrMHz;                                           // ?Ú´?DDRÊ±??Æµ??
    OS_S16 armMHz;                                           // CPU-arm Ê±??Æµ??
    OS_U8 dsp_version[8];                                    // SmartCamer 6437 dsp lib version
    /* Added For Barrett Product Begin */
    OS_U32 product_type;                                     // ??Æ·???Í£?0-> 368: 1->Barrett: 2-Kepler ........
    OS_U32 fpga_version;                                     // FPGA?æ±¾??
    OS_U32 uboot_version;                                    // U-boot?æ±¾??
    OS_U32 app_version;                                      // Ó¦?Ã³????æ±¾??
    OS_U32 hw_id;                                            // Ó²??Ê¶??
    /* Added For Barrett Product End */
    OS_S32 resv[13];                                         // ????
} IPNC_AnswerInfo;

#define SOCK_JPGFILE_NAME               "sock_photofile"
#define DAGUERRE_BC_CMD_HEADER          "iTarge_IPNC_Daguerre_CMD"
#define DAGUERRE_BC_SEARCH_HEADER       "Where_iTarge_IPNC_Daguerre"
#define DAGUERRE_BC_CHANGE_IP           "iTarge_IPNC_Change_IP"
#define DAGUERRE_BC_NICP_RESTART        "iTarge_IPNC_BReStart"
#define DAGUERRE_BC_ITARGE_CHANGE_IP    "iTarge_TEST_Change_IP"

typedef struct IPNC_ChangeIP
{
    IN_ADDR IPAddr;                                          // IP??Ö·
    IN_ADDR NetMask;                                         // ????????
    IN_ADDR Gateway;                                         // ????
    OS_U8 MacAddr[MAC_LENGTH];                               // ?è±¸MAC??Ö·
    OS_U8 Reserved[2];
} IPNC_ChangeIP, *PIPNC_ChangeIP;

// ?Ô¶??Ø¹??ã·¨×´Ì¬
typedef enum
{
    AE_Close,                                                // ?ã·¨?Ø±?
    AE_Open                                                  // ?ã·¨????
} AEState;

// ?Ø¹?????(?Ø±??Ô¶??Ø¹??ã·¨)
typedef struct IPNC_AEParam
{
    OS_S32 nExp;                                             // ?Ø¹?Ê±??
    OS_S32 nGain;                                            // ????
} IPNC_AEParam, *PIPNC_AEParam;

// ?Ô¶???Æ½???ã·¨×´Ì¬
typedef enum
{
    AWB_Close,                                               // ?ã·¨?Ø±?
    AWB_Open                                                 // ?ã·¨????
} AWBState;

// ??Æ½??????(?Ø±??Ô¶???Æ½???ã·¨)
typedef struct IPNC_AWBParam
{
    OS_S32 nRedGain;                                         // ??É«????
    OS_S32 nGreenGain;                                       // ??É«????
    OS_S32 nBlueGain;                                        // À¶É«????
} IPNC_AWBParam, *PIPNC_AWBParam;

// ?Á¹???×´Ì¬
typedef enum
{
    FL_Close,                                                // ?Á¹??Æ¹Ø±?
    FL_Open                                                  // ?Á¹??Æ´???
} FlashLampState;

// ??????Ê½
typedef enum
{
    eAppReset,                                               // ????????
    eSysReset                                                // ÏµÍ³????
} EResetStyle;

typedef enum
{
    eSoft,                                                   // ?í´¥??
    ebayonet,                                                // ????
    eRedlight,                                               // ????
    eRS485,                                                  // RS485????
    eRS232,                                                  // RS232?×´ï´¥??
    eSpeed,                                                  // ???Ù´???
    eStream,                                                 // ??
    bVideoDetecTrig                                          // ??Æµ???â´¥??
} ESnapType;

typedef unsigned long ITE_HANDLE;
#define INVALID_ITE_HANDLE (-1)                              // ??Ð§????

// ×¥??Í¼Æ¬??????Ï¢
typedef struct IPNC_SnapPicInfo
{
    ITE_HANDLE hCamera;                                      // ??????????
    ESnapType SnapType;                                      // ×¥??????
    IPNC_TIME SnapTime;                                      // Í¼Æ¬?Ø¹?Ê±??

    // ??????Ï¢Ö»????IO????????????Ð§
    OS_U32 RedLampTime;                                      // Í¼Æ¬?Ø¹?Ê±????Ê±??
    OS_S32 SnapIndex;                                        // ×¥??????
    OS_U8 Suffix[4];                                         // ×¥???Ä¼?????×º

    OS_S32 TriIndex;                                         // ??????????
    EDriveWay DriveWay;                                      // ??????Ï¢

    OS_S32 nSpeed;                                           // ?Ù¶?
    OS_S32 nSpeedMax;                                        // ????
    OS_S32 nCoilTime;                                        // ??È¦Ê±????(??Î»:ms)
    OS_U8 cCarMum[16];                                       // ???Æº???
    OS_S32 nWorkMode;                                        // ??????????Ä£Ê½(0:???? 1:Ò¹??)
    OS_S32 nTD1;                                             // ×¥????Ê±(??Î»us)
    OS_S32 nTD2;                                             // ?Ø¹???Ê±(??Î»us)
    OS_S32 nBrightAVG;                                       // Æ½???Á¶?

} IPNC_SnapPicInfo, *PIPNC_SnapPicInfo;

//
// ??Æµ?????Í¶???
//
// ??Í¬?ÍºÅµ???????Ö§?Ö²?Í¬??Æµ?????Ô£?Ä¿Ç°??Á½??
// 1??Ö§??JPGË«?????ë£¬Ò»Â·??????×¼Í¼Æ¬??????Ò»Â·?????Í·Ö±???Í¼????640*480????
// 2??Ö§?Ö±?×¼Í¼Æ¬???Èµ??????Ð¸î£¬????Ö§??4???Èµ???????
// 3??Ö§??????Í¼Æ¬???????Ã¡?

// ??Æµ??JPGÍ¼Æ¬????
#if 0                                                        // ?îº½Ê±??
typedef enum
{
    eNormal = (0x1 << 0),                                    // ??×¼?Ö±???Í¼Æ¬
    eLowPixel = (0x1 << 1),                                  // Ë«???????ÄµÚ¶?Â·Í¼Æ¬
    eHot1 = (0x1 << 2),                                      // ?Èµ?????1Í¼Æ¬
    eHot2 = (0x1 << 3),                                      // ?Èµ?????2Í¼Æ¬
    eHot3 = (0x1 << 4),                                      // ?Èµ?????3Í¼Æ¬
    eHot4 = (0x1 << 5)                                       // ?Èµ?????4Í¼Æ¬
} EStreamPicType;
#endif

// ??Æµ??JPGÍ¼Æ¬????
typedef enum
{
    // eNormal = (0x1 << 0), // ??×¼?Ö±???Í¼Æ¬
    eOldPic = 1,                                             // ?É°æ±¾????????????Í¼Æ¬
    eStreamPic = 2,                                          // JPG??Í¼Æ¬
    eSnapPicCloseLamp = 3,                                   // Í¬Ê±????×¥?Äµ?JPG??Í¼Æ¬????Î´?????Á¹???
    eSnapPicOpenLamp = 4                                     // Í¬Ê±????×¥?Äµ?JPG??Í¼Æ¬??Í¬???????Á¹???
} EStreamPicType;

// ??×¼Í¼Æ¬???Èµ??????Ä½???????
typedef enum
{
    eNormalRegion = (0x1 << 0),
    eLowPixelRegion = (0x1 << 1),
    eHotRegion1 = (0x1 << 2),
    eHotRegion2 = (0x1 << 3),
    eHotRegion3 = (0x1 << 4),
    eHotRegion4 = (0x1 << 5),
} EStreamRegionType;

// Í¼Æ¬??????Ð¡
typedef struct IPNC_StreamRegion
{
    OS_S32 topx;
    OS_S32 topy;
    OS_S32 botx;
    OS_S32 boty;
} IPNC_StreamRegion, *PIPNC_StreamRegion;

// Í¼Æ¬?Èµ???????Ï¢
#define IPNC_HOTREGION_NUM  4
typedef struct IPNC_StreamHotRegion
{
    IPNC_StreamRegion HotRegion[IPNC_HOTREGION_NUM];
} IPNC_StreamHotRegion, *PIPNC_StreamHotRegion;

// ??Í¼Æ¬??Ï¢
typedef struct IPNC_StreamPicInfo
{
    ITE_HANDLE hCamera;                                      // ??????????
    EStreamPicType picType;                                  // ??Í¼Æ¬????
    IPNC_TIME picExpTime;                                    // Í¼Æ¬?Ø¹?Ê±??
    OS_U32 dwReserved;
} IPNC_StreamPicInfo, *PIPNC_StreamPicInfo;

/*
                                                             // ??Í¼Æ¬??Ð¡????????
typedef struct IPNC_StreamJPGSizeParam
{
    OS_S32 nFlag;                                            // 0:??Ê¹??  1:Ê¹??
    OS_S32 nMaxSize;                                         // Í¼Æ¬??Ð¡????
}IPNC_StreamJPGSizeParam,*PIPNC_StreamJPGSizeParam;
*/

// SD??×´Ì¬

typedef struct IPNC_SDCardState
{
    enum
    {
        eSDCardPull = 0,                                     // Î´????
        eSDCardInserted = 1                                  // ?Ñ²???
    } hasSDCard;
    OS_U32 dwTotalCapacity;                                  // SD??????Á¿ MB???×£?Îª??Î»
    OS_U32 dwFreeCapacity;                                   // SD??Ê£????????Á¿
} IPNC_SDCardState, *PIPNC_SDCardState;

// SD???Ä¼?????
typedef enum
{
    eSubdirectory = 0,                                       // ??Ä¿Â¼
    eJPGPic = 1                                              // Í¼Æ¬?Ä¼?
} ESDFileType;

// SD??Ä¿Â¼????
#define MAX_SD_PATH 256

typedef struct IPNC_SDCardFileInfo
{
    ESDFileType type;                                        // ????????
    OS_U8 szName[MAX_SD_PATH];                               // ??Ä¿Â¼???????Ä¼???
} IPNC_SDCardFileInfo, *PIPNC_SDCardFileInfo;

typedef struct IPNC_SDCardDirectory
{
    OS_U8 szCurDirectory[MAX_SD_PATH];                       // ??Ç°????Â·??
    // ?Ö·?'\'??Ê¾??Ä¿Â¼
    OS_U32 dwFileCount;                                      // ??Ä¿Â¼???Ä¼???Á¿
    IPNC_SDCardFileInfo *pFileInfo;
} IPNC_SDCardDirectory, *PIPNC_SDCardDirectory;

// RS485
typedef struct IPNC_RS485Param
{
    OS_S32 nBaudRate;                                        // ??????
    OS_U8 cCheckBit[4];                                      // Ð£??Î»(Ö»??cCheckBit[0]????) N:??
    // O:?? E:Å¼ M:??Ö¾ S:?Õ¸?
    OS_S32 nDataBit;                                         // ????Î»
    OS_S32 nStopBit;                                         // Í£Ö¹Î»
    OS_S32 nType;                                            // ?????????? 1:?Ïº?Í¼Á¢
    // 2:????É£?? 3:?Ïº???Î¬ 4:???É»???
} IPNC_RS485Param, *PIPNC_RS485Param;

// RS232
typedef struct IPNC_RS232Param
{
    OS_S32 nBaudRate;                                        // ??????
    OS_U8 cCheckBit[4];                                      // Ð£??Î» N:?? O:?? E:Å¼ M:??Ö¾
    // S:?Õ¸?
    OS_S32 nDataBit;                                         // ????Î»
    OS_S32 nStopBit;                                         // Í£Ö¹Î»
} IPNC_RS232Param, *PIPNC_RS232Param;

// ??È¦????
typedef enum
{
    eLane1 = 1,                                              // 1????
    eLane2,                                                  // 2????
    eLane3,                                                  // 3????
    eLane4                                                   // 4????
} EDriveLane;

typedef enum
{
    eRadraSel1 = 1,                                          // ?×´?1
    eRadraSel2,                                              // ?×´?2
    eRadraSel3,                                              // ?×´?3
    eRadraSel4                                               // ?×´?4
} ERadraSel;

typedef enum
{
    eInPut1 = 1,
    eInPut2,
    eInPut3,
    eInPut4,
    eInPut5,
    eInPut6,
    eInPut7,
    eInPut8,
} EIOInput;                                                  // Ö§??8????

typedef struct LaneInfo
{
    OS_S32 nEnable;                                          // ?Ç·???Ð§ 1:??Ð§ 0:??Ð§
    OS_S32 DriveLane;                                        // ???ô³µµ?
    ERadraSel RadraSel;                                      // ?×´?Ñ¡??
    EIOInput Input1;                                         // I/OÑ¡??1
    EIOInput Input2;                                         // I/OÑ¡??2
    OS_F32 fDistance;                                        // ??È¦????
    OS_F32 fSpeedMax;                                        // ????
} LaneInfo, *PLaneInfo;

typedef struct LaneExInfo
{
    OS_S32 nEnable;                                          // ?Ç·???Ð§ 1:??Ð§ 0:??Ð§
    OS_S32 DriveLane;                                        // ???ô³µµ?
    ERadraSel RadraSel;                                      // ?×´?Ñ¡??
    EIOInput Input1;                                         // I/OÑ¡??1
    EIOInput Input2;                                         // I/OÑ¡??2
    OS_F32 fDistance;                                        // ??È¦????
    OS_F32 fSpeedMax;                                        // ????
    OS_S32 nCount;                                           // ????×¥??????
    OS_S32 nDelay;                                           // Ê±?????? ??Î»:ms
    OS_S32 nSpeedCount;                                      // ????×¥??????
    OS_S32 PrecentMaxSpeed;
    OS_S32 nReserve[2];                                      // ????
} LaneExInfo, *PLaneExInfo;

typedef enum
{
    eRadar = 0,                                              // ?×´?????
    eCoil = 1                                                // ??È¦????
} ESpeedType;

typedef enum
{
    eChuanSuWeiBo = 0,                                       // ????Î¢??
    eAndoray = 1                                             // ??????
} ERadarType;

#define LANECOUNT 4

typedef struct IPNC_SpeedParam
{
    ESpeedType SpeedType;
    ERadarType RadarType;
    OS_S32 nCurSpeed;                                        // ?Ç·????Óµ?Ç°???? 1:????
    // 0:??????
    OS_S32 nSpeedMax;                                        // ?Ç·????????? 1:???? 0:??????
    OS_S32 nOverSpeed;                                       // ?Ç·????Ó³??? 1:???? 0:??????
    LaneInfo LaneParam[LANECOUNT];

} IPNC_SpeedParam, *PIPNC_SpeedParam;

typedef struct IPNC_SpeedExParam
{
    ESpeedType SpeedType;
    ERadarType RadarType;
    OS_S32 nCurSpeed;                                        // ?Ç·????Óµ?Ç°???? 1:????
    // 0:??????
    OS_S32 nSpeedMax;                                        // ?Ç·????????? 1:???? 0:??????
    OS_S32 nOverSpeed;                                       // ?Ç·????Ó³??? 1:???? 0:??????
    LaneExInfo LaneParam[LANECOUNT];

} IPNC_SpeedExParam, *PIPNC_SpeedExParam;

typedef enum
{
    eOnLine = 0,                                             // ????
    eNoLine = 1                                              // ??????
} EState;

typedef enum
{
    eDay = 0,                                                // ????
    eNight = 1                                               // Ò¹??
} EWorkMode;

typedef enum
{
    eFocus = 0,                                              // ????Ä£Ê½
    eCatch = 1                                               // ×¥??Ä£Ê½
} ECameraMode;

typedef enum
{
    eNoSyn = 0,                                              // ??Í¬??
    eSyn = 1                                                 // ????Í¬??
} EAutoSyn;

typedef enum
{
    eDC = 0,                                                 // Ö±??
    eAC = 1                                                  // ????
} EElectricity;

// ?í´¥??
typedef struct IPNC_MSoftParam
{
    OS_S32 nCount;                                           // ×¥??????
    OS_S32 nWaitTime;                                        // ×¥?Ä¼???(ms)
    OS_S32 nLamp;                                            // Òª???Æµ??Á¹???(??Î»????,?????????Ä¸??Á¹???)
    EDriveWay DriveWay;                                      // ???ô³µµ?
    OS_S32 nSpeed;                                           // ????
    OS_S32 nSpeedMax;                                        // ????
    OS_U8 cCarMum[16];                                       // ???Æº???
    OS_S32 pContext;                                         // ????????Ï¢
} IPNC_MSoftParam, *PIPNC_MSoftParam;

#define LAMP_COUNT  4
typedef struct IPNC_LampParam
{
    OS_S32 nMode[LAMP_COUNT];                                // 0:???? 1:????
    OS_S32 nLampType[LAMP_COUNT];                            // TS:Ç°3????Ä¬??ÎªÆµ?Áµ?
    // ???Ä¸????? 1:Æµ?Áµ? 2: LED 3: ????
    // TC:4???Æ¶?????????(??????????Æµ?Áµ?) 2: LED 3: ????
} IPNC_LampParam, *PIPNC_LampParam;

typedef struct IPNC_SDCardJPG
{
    OS_S32 nType;                                            // 0:???? 1:É¾??
    IN_ADDR IPAddr;                                          // IP??Ö·
    OS_S32 nPort;                                            // ?Ë¿ÚºÅ£?35568??
} IPNC_SDCardJPG;


typedef struct IPNC_ImageMergeType
{
    OS_S32 merge_enable;                                     // 0?Ø±Õ£?1????(Í¼Æ¬?Ï³?????)
    OS_S32 plate_mul;                                        // Ä¬??Îª4??????1-8(??Ð´???Æ·Å´?????)
    OS_S32 plate_change;                                     // Ä¬??Îª1??????1-3(??Ð´????Ñ¡??)
    OS_U16 bayonet_one_merge;                                // Ä¬??Îª0??????1-22(???Úµ?Í¼Í¼Æ¬?Ï³É·?Ê½)
    OS_U16 bayonet_expand_height;                            // Ä¬?? 120??????Ñ¡???? 120   180   240
    OS_S32 bayonet_mul_merge;                                // Ä¬??Îª0??????1-22(????Î¥?Â¶?Í¼Í¼Æ¬?Ï³É·?Ê½)
    OS_U16 police_one_merge;                                 // Ä¬??Îª0??????1-22(???Úµ?Í¼Í¼Æ¬?Ï³É·?Ê½)
    OS_U16 police_expand_height;                             // Ä¬?? 120??????Ñ¡???? 120   180   240
    OS_S32 police_mul_merge;                                 // Ä¬??Îª0??????1-22(???Ó¾???Î¥?Â¶?Í¼Í¼Æ¬?Ï³É·?Ê½)
    OS_S32 upload;                                           // Ä¬??Îª0??????1(SDK?Ï´??ÇºÏ³??Ä¼???????Ê½)
} IPNC_ImageMergeType, *PIPNC_ImageMergeType;

typedef struct _POL_FAN_INFO
{
    OS_U8 ucMaxTmp;                                          // ?????????Â¶?
    OS_U8 ucMinTmp;                                          // ?Ø±Õ·????Â¶?
    OS_U8 cAuto_Fan;                                         // 0Ê¹???Ö¶?????   1Ê¹???Ô¶?????
    OS_U8 cFlag_Fan;                                         // ?Ö¶????È±?Ö¾ 0Îª?Ø±? 1Îª×ª??

    /*OS_U8 ucMaxBr;                                         // Æ«?â¾µ???Ú´??Á¶?????
    OS_U8 ucMinBr;                                           // Æ«?â¾µÐ¡?Ú´??Á¶?????*/
    OS_U16 usShutter;                                        // Æ«?????Ø¹â·§Öµ
    OS_U8 cAuto_Pol;                                         // 0Ê¹???Ö¶?Æ«?â¾µ  1Ê¹???Ô¶?Æ«?â¾µ
    OS_U8 cFlag_Pol;                                         // ?Ö¶?Æ«????Ö¾ 0Îª???? 1Îª????
} POL_FAN_info;

typedef struct _LIGHT_CON_INFO
{
    OS_S32  YellowEnable;                                    // ???Áµ?×´Ì¬
    OS_U8 RedEnable;                                         // ????×´Ì¬
    OS_U8 RedNum;                                            // ????????
    OS_U8 GreenEnable;                                       // ?Ìµ?×´Ì¬
    OS_U8 GreenNum;                                          // ?Ìµ?????
} Light_Con_info;

typedef struct stFpsConf
{
    OS_U8 avsFps;// Æ½¾ùËÙ¶È·¢ËÍÆµÂÊ£¬ÓÃ»§ÊäÈë£¬µ¥Î»£¨·ÖÖÓ£©
    OS_U8 resv[31];
}stFpsConf;

typedef struct stSignalLight
{
    OS_U8 light;// ÐÅºÅµÆÑ¡Ôñ 0Îª×ó×ª 1ÎªÖ±ÐÐ 2ÎªÓÒ×ª 3ÎªµôÍ·£¬ÓÃ»§Ñ¡Ôñ
    OS_U8 resv[3];
}stSignalLight;

typedef struct IPNC_VIDEO_OSDGAT751      //ÊÓÆµÏà¹ØGAT751OSD ²ÎÊý¶¨Òå(H264   CVBS  HD_SDI)
{   
	char city[16];//³ÇÊÐ
	char prefecture[16];//ÊÐÇø
	char town[16];//ÏçÕò½ÖµÀ
	char site[48];//µØµã
	char IpcInfo[16];//ÉãÏñ»úÐÅÏ¢
	char	province[8];//Ê¡
	char res[8];

} IPNC_VIDEO_OSDGAT751;

typedef struct stCustomServerConf
{
    OS_U32 enCustomTrans; // Ê¹ÄÜ 0 ²»ÆôÓÃ 1 ÆôÓÃ
    OS_U8 serverIP[16]; // ·þÎñ¶ËIP
    OS_U16 serverPort; // ·þÎñ¶Ë¶Ë¿Ú
    OS_U16 transByUdp; // ´«Êä·½Ê½ 0 Tcp 1 udp ÔÝÊ±²»¿ÉÅäÖÃ
    OS_U8 roadNum[64]; // Â·¿Ú±àºÅ
    POL_FAN_info stPfPrm;  // 8char
    OS_U16 hearttime;//âùºÍÐÄÌø³¬Ê±Ê±¼ä
    OS_U16 greentime;//âùºÍÂÌµÆ³¬Ê±Ê±¼ä
    Light_Con_info lightinfo[3];//0 Îª×ó×ª 1ÎªÖ±ÐÐ  2ÎªÓÒ×ª 8char£¬ÓÃ»§Ñ¡Ôñ
    OS_U32 ucMaxBr;//Æ«¹â¾µ´óÓÚ´ËÁÁ¶ÈÏòÉÏ
    OS_U32 ucMinBr;//Æ«¹â¾µÐ¡ÓÚ´ËÁÁ¶ÈÏòÏÂ
    OS_U8 IPaddr[16]; // ÐÅºÅ»úIP
    OS_U32 svacTest; // Svac ²âÊÔ ³õÊ¼»¯Îª0£¬µã»÷Îª1
    OS_U32 port; // ¶Ë¿Ú
    IPNC_VIDEO_OSDGAT751 gat751_osd; //128
    OS_U32 IPCNum;
    OS_U32 LevelEnable;
    stFpsConf fpsConf;// ÆµÂÊÏà¹Ø²ÎÊý
    stSignalLight signalLight;
    OS_U8 username[32]; // ·þÎñ¶ËÓÃ»§Ãû
    OS_U8 passwd[32]; // ·þÎñ¶ËÃÜÂë
    OS_U8 resv[956-128-8-36-64]; // ±£Áô×Ö¶Î
}stCustomServerConf; 


/* ????Öµ */
#define RET_ERR 1
#define RET_OK  0
#define RET_SDK_EXISTED -1                                   // ?Ñ´??? SDK ??Ò»??Êµ?? ITE_InitÊ§??

#endif // __ITE_NET_SDK_H__
